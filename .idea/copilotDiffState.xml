<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/ridesharex-frontend/src/Services/AuthService.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ridesharex-frontend/src/Services/AuthService.js" />
              <option name="updatedContent" value="import axios from 'axios';&#10;&#10;const API_URL = 'http://localhost:8080/api/auth/';&#10;&#10;class AuthService {&#10;  login(username, password) {&#10;    return axios&#10;      .post(API_URL + 'signin', {&#10;        username,&#10;        password&#10;      })&#10;      .then(response =&gt; {&#10;        if (response.data.accessToken) {&#10;          localStorage.setItem('user', JSON.stringify(response.data));&#10;        }&#10;        return response.data;&#10;      });&#10;  }&#10;&#10;  logout() {&#10;    localStorage.removeItem('user');&#10;  }&#10;&#10;  register(username, email, password, roles) {&#10;    return axios.post(API_URL + 'signup', {&#10;      username,&#10;      email,&#10;      password,&#10;      roles&#10;    });&#10;  }&#10;&#10;  getCurrentUser() {&#10;    return JSON.parse(localStorage.getItem('user'));&#10;  }&#10;}&#10;&#10;export default new AuthService();&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ridesharex-frontend/src/Services/UserService.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ridesharex-frontend/src/Services/UserService.js" />
              <option name="updatedContent" value="const API_URL = 'http://localhost:8080';&#10;&#10;class UserService {&#10;    async login(credentials) {&#10;        const response = await fetch(`${API_URL}/auth/login`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;            },&#10;            body: JSON.stringify(credentials)&#10;        });&#10;&#10;        const data = await response.json();&#10;        if (response.ok) {&#10;            // Store the token in localStorage&#10;            localStorage.setItem('token', data.token);&#10;            localStorage.setItem('user', JSON.stringify(data.user));&#10;            return data;&#10;        }&#10;        throw new Error(data.message || 'Login failed');&#10;    }&#10;&#10;    async register(userData) {&#10;        const response = await fetch(`${API_URL}/auth/register`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;            },&#10;            body: JSON.stringify(userData)&#10;        });&#10;&#10;        const data = await response.json();&#10;        if (response.ok) {&#10;            return data;&#10;        }&#10;        throw new Error(data.message || 'Registration failed');&#10;    }&#10;&#10;    logout() {&#10;        localStorage.removeItem('token');&#10;        localStorage.removeItem('user');&#10;    }&#10;&#10;    getCurrentUser() {&#10;        const userStr = localStorage.getItem('user');&#10;        return userStr ? JSON.parse(userStr) : null;&#10;    }&#10;&#10;    getToken() {&#10;        return localStorage.getItem('token');&#10;    }&#10;&#10;    isLoggedIn() {&#10;        return !!this.getToken();&#10;    }&#10;}&#10;&#10;export default new UserService();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ridesharex-frontend/src/components/LocationMarker.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ridesharex-frontend/src/components/LocationMarker.js" />
              <option name="updatedContent" value="import { useMapEvents } from 'react-leaflet';&#10;&#10;function LocationMarker({ onLocationSelect }) {&#10;  useMapEvents({&#10;    click(e) {&#10;      if (onLocationSelect) {&#10;        onLocationSelect({ latlng: e.latlng });&#10;      }&#10;    }&#10;  });&#10;  return null;&#10;}&#10;&#10;export default LocationMarker;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ridesharex-frontend/src/components/Map.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ridesharex-frontend/src/components/Map.js" />
              <option name="originalContent" value="import React, { useEffect, useRef, useState } from 'react';&#10;import { MapContainer, Marker, Popup, TileLayer, Polyline } from 'react-leaflet';&#10;import 'leaflet/dist/leaflet.css';&#10;import LocationMarker from './LocationMarker';&#10;import { getLatLng } from '../utils/locationUtils';&#10;import { blueIcon, brownIcon, createVehicleIcon } from '../utils/iconUtils';&#10;&#10;const rideOptions = [&#10;  { type: 'CNG', color: 'green' },&#10;  { type: 'Car', color: 'blue' },&#10;  { type: 'Premium', color: 'purple' },&#10;  { type: 'Bike', color: 'orange' }&#10;];&#10;&#10;function CurrentLocationButton({ onClick }) {&#10;  return (&#10;    &lt;button&#10;      style={{&#10;        position: 'absolute',&#10;        bottom: 30,&#10;        right: 30,&#10;        zIndex: 1000,&#10;        padding: '12px 18px',&#10;        borderRadius: '50%',&#10;        background: '#1976d2',&#10;        color: 'white',&#10;        border: 'none',&#10;        boxShadow: '0 2px 8px rgba(0,0,0,0.15)',&#10;        cursor: 'pointer',&#10;        fontSize: '20px'&#10;      }}&#10;      onClick={onClick}&#10;      title=&quot;Go to current location&quot;&#10;    &gt;&lt;/button&gt;&#10;  );&#10;}&#10;&#10;function RideOptionsModal({ visible, onSelect, onClose }) {&#10;  if (!visible) return null;&#10;  return (&#10;    &lt;div className=&quot;modal-overlay&quot;&gt;&#10;      &lt;div className=&quot;booking-modal&quot;&gt;&#10;        &lt;h3&gt;Choose Your Ride&lt;/h3&gt;&#10;        &lt;div className=&quot;vehicle-options&quot;&gt;&#10;          {rideOptions.map(opt =&gt; (&#10;            &lt;div&#10;              key={opt.type}&#10;              className=&quot;vehicle-card&quot;&#10;              onClick={() =&gt; onSelect(opt.type)}&#10;            &gt;&#10;              &lt;span className=&quot;vehicle-icon&quot;&gt;{opt.type === 'CNG' ? '' : opt.type === 'Car' ? '' : opt.type === 'Premium' ? '' : '️'}&lt;/span&gt;&#10;              &lt;h4&gt;{opt.type}&lt;/h4&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;        &lt;button className=&quot;close-modal-btn&quot; onClick={onClose}&gt;Cancel&lt;/button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;function RiderInfoModal({ visible, rider, onClose }) {&#10;    if (!visible || !rider) return null;&#10;    return (&#10;      &lt;div className=&quot;modal-overlay&quot;&gt;&#10;        &lt;div className=&quot;rider-info-modal&quot;&gt;&#10;          &lt;div className=&quot;rider-info-content&quot;&gt;&#10;            &lt;div className=&quot;rider-header&quot;&gt;&#10;              &lt;div className=&quot;rider-photo&quot;&gt;&#10;                &lt;img src={rider.photo || 'https://randomuser.me/api/portraits/men/32.jpg'} alt=&quot;Rider&quot; /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;rider-details&quot;&gt;&#10;                &lt;div className=&quot;rider-name&quot;&gt;{rider.name}&lt;/div&gt;&#10;                &lt;div className=&quot;rider-rating&quot;&gt;&#10;                  &lt;span className=&quot;rating-star&quot;&gt;★&lt;/span&gt; {rider.rating || '4.8'}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;vehicle-info&quot;&gt;&#10;              &lt;div className=&quot;vehicle-type&quot;&gt;&#10;                &lt;span className=&quot;vehicle-icon&quot;&gt;{rider.type === 'CNG' ? '' : rider.type === 'Car' ? '' : rider.type === 'Premium' ? '' : '️'}&lt;/span&gt;&#10;                &lt;span className=&quot;vehicle-details&quot;&gt;{rider.type}&lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;span className=&quot;price-tag&quot;&gt;৳{rider.price || '120'}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;action-buttons&quot;&gt;&#10;              &lt;button className=&quot;call-button&quot; onClick={onClose}&gt;Call Rider&lt;/button&gt;&#10;              &lt;button className=&quot;cancel-button&quot; onClick={onClose}&gt;Cancel&lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;modal-backdrop&quot; onClick={onClose}&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;function Map({ onLocationSelect, selectedLocation, availableVehicles, onRiderSelect, driverLocation, pickupLocation, destinationLocation }) {&#10;  const [currentLocation, setCurrentLocation] = useState([23.8103, 90.4125]); // Default to Dhaka&#10;  const [showModal, setShowModal] = useState(false);&#10;  const [selectedRide, setSelectedRide] = useState(null);&#10;  const [showRiderModal, setShowRiderModal] = useState(false);&#10;  const [bookedRider, setBookedRider] = useState(null);&#10;  const mapRef = useRef();&#10;&#10;  useEffect(() =&gt; {&#10;    navigator.geolocation.getCurrentPosition(&#10;      (position) =&gt; {&#10;        const coords = [position.coords.latitude, position.coords.longitude];&#10;        setCurrentLocation(coords);&#10;        if (mapRef.current) {&#10;          mapRef.current.setView(coords, 15);&#10;        }&#10;      },&#10;      () =&gt; {&#10;        console.log(&quot;Could not get user's location, defaulting to Dhaka.&quot;);&#10;      }&#10;    );&#10;  }, []);&#10;&#10;  const pickupLatLng = pickupLocation ? getLatLng(pickupLocation) : null;&#10;  const destinationLatLng = destinationLocation ? getLatLng(destinationLocation) : (selectedLocation ? getLatLng(selectedLocation) : null);&#10;&#10;  // Center map to current location&#10;  const handleCurrentLocation = () =&gt; {&#10;    if (mapRef.current &amp;&amp; currentLocation) {&#10;      mapRef.current.setView(currentLocation, 15);&#10;    }&#10;  };&#10;&#10;  // Show modal when destination is selected&#10;  const handlePickRide = () =&gt; {&#10;    setShowModal(true);&#10;  };&#10;&#10;  // After ride selection, show mini markers for that type&#10;  const filteredVehicles = selectedRide &amp;&amp; availableVehicles&#10;    ? availableVehicles.filter(v =&gt; v.type === selectedRide)&#10;    : [];&#10;&#10;    const dummyRider = bookedRider || (filteredVehicles.length &gt; 0 ? {&#10;        name: 'Rider One',&#10;        photo: '',&#10;        rating: '4.8',&#10;        type: selectedRide,&#10;        price: '120',&#10;        lat: filteredVehicles[0].lat,&#10;        lng: filteredVehicles[0].lng&#10;      } : null);&#10;&#10;      // Dummy tracking line from rider to user&#10;      const trackingLine = dummyRider &amp;&amp; currentLocation ? [&#10;        [dummyRider.lat, dummyRider.lng],&#10;        currentLocation&#10;      ] : null;&#10;&#10;      // Book ride handler&#10;      const handleBookRide = () =&gt; {&#10;        setBookedRider(dummyRider);&#10;        setShowRiderModal(true);&#10;      };&#10;&#10;  return (&#10;    &lt;div style={{ position: 'relative', height: '100%' }}&gt;&#10;      &lt;MapContainer center={currentLocation || [23.8103, 90.4125]} zoom={13} style={{ height: '100%', width: '100%' }} ref={mapRef}&gt;&#10;        &lt;TileLayer&#10;          url=&quot;https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png&quot;&#10;          attribution=&quot;&amp;copy; &lt;a href='https://carto.com/attributions'&gt;CARTO&lt;/a&gt;&quot;&#10;        /&gt;&#10;        {/* Current location marker */}&#10;        {currentLocation &amp;&amp; (&#10;          &lt;Marker position={currentLocation} icon={blueIcon}&gt;&#10;            &lt;Popup&gt;Your current location&lt;/Popup&gt;&#10;          &lt;/Marker&gt;&#10;        )}&#10;        {/* Mini markers for selected ride type */}&#10;        {filteredVehicles.map((vehicle, idx) =&gt; (&#10;          &lt;Marker key={idx} position={[vehicle.lat, vehicle.lng]} icon={createVehicleIcon(vehicle.color)}&gt;&#10;            &lt;Popup&gt;{vehicle.type}&lt;/Popup&gt;&#10;          &lt;/Marker&gt;&#10;        ))}&#10;        {/* Dummy tracking line from rider to user */}&#10;        {trackingLine &amp;&amp; (&#10;            &lt;Polyline positions={trackingLine} color=&quot;red&quot; /&gt;&#10;        )}&#10;        {/* Feature for User's Home Page */}&#10;        {onLocationSelect &amp;&amp; &lt;LocationMarker onLocationSelect={onLocationSelect} /&gt;}&#10;        {selectedLocation &amp;&amp; selectedLocation.latlng &amp;&amp; (&#10;          &lt;Marker position={selectedLocation.latlng} icon={brownIcon}&gt;&#10;            &lt;Popup&gt;Your selected destination&lt;/Popup&gt;&#10;          &lt;/Marker&gt;&#10;        )}&#10;        {/* Features for Driver Dashboard */}&#10;        {driverLocation &amp;&amp; (&#10;          &lt;Marker position={driverLocation} icon={blueIcon}&gt;&#10;            &lt;Popup&gt;Your current location&lt;/Popup&gt;&#10;          &lt;/Marker&gt;&#10;        )}&#10;        {pickupLatLng &amp;&amp; (&#10;          &lt;Marker position={pickupLatLng} icon={brownIcon}&gt;&#10;            &lt;Popup&gt;Pickup: {pickupLocation}&lt;/Popup&gt;&#10;          &lt;/Marker&gt;&#10;        )}&#10;        {destinationLatLng &amp;&amp; (&#10;          &lt;Marker position={destinationLatLng} icon={brownIcon}&gt;&#10;            &lt;Popup&gt;Destination: {destinationLocation || 'Selected Location'}&lt;/Popup&gt;&#10;          &lt;/Marker&gt;&#10;        )}&#10;        {pickupLatLng &amp;&amp; destinationLatLng &amp;&amp; (&#10;          &lt;Polyline positions={[pickupLatLng, destinationLatLng]} color=&quot;blue&quot; /&gt;&#10;        )}&#10;        {/* Current Location Button */}&#10;        &lt;CurrentLocationButton onClick={handleCurrentLocation} /&gt;&#10;      &lt;/MapContainer&gt;&#10;      {/* Pick Ride Button */}&#10;      {selectedLocation &amp;&amp; selectedLocation.latlng &amp;&amp; !selectedRide &amp;&amp; (&#10;        &lt;button&#10;          style={{&#10;            position: 'absolute',&#10;            top: '20px',&#10;            left: '50%',&#10;            transform: 'translateX(-50%)',&#10;            zIndex: 1000,&#10;            padding: '14px 32px',&#10;            background: '#1976d2',&#10;            color: 'white',&#10;            border: 'none',&#10;            borderRadius: '12px',&#10;            fontSize: '20px',&#10;            boxShadow: '0 2px 8px rgba(0,0,0,0.15)',&#10;            cursor: 'pointer'&#10;          }}&#10;          onClick={handlePickRide}&#10;        &gt;Pick Ride&lt;/button&gt;&#10;      )}&#10;      {/* Ride Options Modal */}&#10;      &lt;RideOptionsModal&#10;        visible={showModal}&#10;        onSelect={type =&gt; {&#10;          setSelectedRide(type);&#10;          setShowModal(false);&#10;        }}&#10;        onClose={() =&gt; setShowModal(false)}&#10;      /&gt;&#10;      {/* Book Ride Button (after ride selected) */}&#10;      {selectedRide &amp;&amp; filteredVehicles.length &gt; 0 &amp;&amp; !bookedRider &amp;&amp; (&#10;        &lt;button&#10;          style={{&#10;            position: 'absolute',&#10;            top: '70px',&#10;            left: '50%',&#10;            transform: 'translateX(-50%)',&#10;            zIndex: 1000,&#10;            padding: '14px 32px',&#10;            background: '#28a745',&#10;            color: 'white',&#10;            border: 'none',&#10;            borderRadius: '12px',&#10;            fontSize: '20px',&#10;            boxShadow: '0 2px 8px rgba(0,0,0,0.15)',&#10;            cursor: 'pointer'&#10;          }}&#10;          onClick={handleBookRide}&#10;        &gt;Book Ride&lt;/button&gt;&#10;      )}&#10;      {/* Rider Info Modal (floating window in center) */}&#10;      &lt;RiderInfoModal visible={showRiderModal} rider={dummyRider} onClose={() =&gt; setShowRiderModal(false)} /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default Map;&#10;" />
              <option name="updatedContent" value="import React, { useEffect, useRef, useState } from 'react';&#10;import { MapContainer, Marker, Popup, TileLayer, Polyline } from 'react-leaflet';&#10;import 'leaflet/dist/leaflet.css';&#10;import LocationMarker from './LocationMarker';&#10;import { getLatLng } from '../utils/locationUtils';&#10;import { blueIcon, brownIcon, createVehicleIcon } from '../utils/iconUtils';&#10;&#10;const rideOptions = [&#10;  { type: 'CNG', color: 'green' },&#10;  { type: 'Car', color: 'blue' },&#10;  { type: 'Premium', color: 'purple' },&#10;  { type: 'Bike', color: 'orange' }&#10;];&#10;&#10;function CurrentLocationButton({ onClick }) {&#10;  return (&#10;    &lt;button&#10;      style={{&#10;        position: 'absolute',&#10;        bottom: 30,&#10;        right: 30,&#10;        zIndex: 1000,&#10;        padding: '12px 18px',&#10;        borderRadius: '50%',&#10;        background: '#1976d2',&#10;        color: 'white',&#10;        border: 'none',&#10;        boxShadow: '0 2px 8px rgba(0,0,0,0.15)',&#10;        cursor: 'pointer',&#10;        fontSize: '20px'&#10;      }}&#10;      onClick={onClick}&#10;      title=&quot;Go to current location&quot;&#10;    &gt;&lt;/button&gt;&#10;  );&#10;}&#10;&#10;function RideOptionsModal({ visible, onSelect, onClose }) {&#10;  if (!visible) return null;&#10;  return (&#10;    &lt;div className=&quot;modal-overlay&quot;&gt;&#10;      &lt;div className=&quot;booking-modal&quot;&gt;&#10;        &lt;h3&gt;Choose Your Ride&lt;/h3&gt;&#10;        &lt;div className=&quot;vehicle-options&quot;&gt;&#10;          {rideOptions.map(opt =&gt; (&#10;            &lt;div&#10;              key={opt.type}&#10;              className=&quot;vehicle-card&quot;&#10;              onClick={() =&gt; onSelect(opt.type)}&#10;            &gt;&#10;              &lt;span className=&quot;vehicle-icon&quot;&gt;{opt.type === 'CNG' ? '' : opt.type === 'Car' ? '' : opt.type === 'Premium' ? '' : '️'}&lt;/span&gt;&#10;              &lt;h4&gt;{opt.type}&lt;/h4&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;        &lt;button className=&quot;close-modal-btn&quot; onClick={onClose}&gt;Cancel&lt;/button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;function RiderInfoModal({ visible, rider, onClose }) {&#10;    if (!visible || !rider) return null;&#10;    return (&#10;      &lt;div className=&quot;modal-overlay&quot;&gt;&#10;        &lt;div className=&quot;rider-info-modal&quot;&gt;&#10;          &lt;div className=&quot;rider-info-content&quot;&gt;&#10;            &lt;div className=&quot;rider-header&quot;&gt;&#10;              &lt;div className=&quot;rider-photo&quot;&gt;&#10;                &lt;img src={rider.photo || 'https://randomuser.me/api/portraits/men/32.jpg'} alt=&quot;Rider&quot; /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;rider-details&quot;&gt;&#10;                &lt;div className=&quot;rider-name&quot;&gt;{rider.name}&lt;/div&gt;&#10;                &lt;div className=&quot;rider-rating&quot;&gt;&#10;                  &lt;span className=&quot;rating-star&quot;&gt;★&lt;/span&gt; {rider.rating || '4.8'}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;vehicle-info&quot;&gt;&#10;              &lt;div className=&quot;vehicle-type&quot;&gt;&#10;                &lt;span className=&quot;vehicle-icon&quot;&gt;{rider.type === 'CNG' ? '' : rider.type === 'Car' ? '' : rider.type === 'Premium' ? '' : '️'}&lt;/span&gt;&#10;                &lt;span className=&quot;vehicle-details&quot;&gt;{rider.type}&lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;span className=&quot;price-tag&quot;&gt;৳{rider.price || '120'}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;action-buttons&quot;&gt;&#10;              &lt;button className=&quot;call-button&quot; onClick={onClose}&gt;Call Rider&lt;/button&gt;&#10;              &lt;button className=&quot;cancel-button&quot; onClick={onClose}&gt;Cancel&lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;modal-backdrop&quot; onClick={onClose}&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;function Map({ onLocationSelect, selectedLocation, availableVehicles, onRiderSelect, driverLocation, pickupLocation, destinationLocation }) {&#10;  const [currentLocation, setCurrentLocation] = useState([23.8103, 90.4125]); // Default to Dhaka&#10;  const [showModal, setShowModal] = useState(false);&#10;  const [selectedRide, setSelectedRide] = useState(null);&#10;  const [showRiderModal, setShowRiderModal] = useState(false);&#10;  const [bookedRider, setBookedRider] = useState(null);&#10;  const mapRef = useRef();&#10;&#10;  useEffect(() =&gt; {&#10;    navigator.geolocation.getCurrentPosition(&#10;      (position) =&gt; {&#10;        const coords = [position.coords.latitude, position.coords.longitude];&#10;        setCurrentLocation(coords);&#10;        if (mapRef.current) {&#10;          mapRef.current.setView(coords, 15);&#10;        }&#10;      },&#10;      () =&gt; {&#10;        console.log(&quot;Could not get user's location, defaulting to Dhaka.&quot;);&#10;      }&#10;    );&#10;  }, []);&#10;&#10;  const pickupLatLng = pickupLocation ? getLatLng(pickupLocation) : null;&#10;  const destinationLatLng = destinationLocation ? getLatLng(destinationLocation) : (selectedLocation ? getLatLng(selectedLocation) : null);&#10;&#10;  // Center map to current location&#10;  const handleCurrentLocation = () =&gt; {&#10;    if (mapRef.current &amp;&amp; currentLocation) {&#10;      mapRef.current.setView(currentLocation, 15);&#10;    }&#10;  };&#10;&#10;  // Show modal when destination is selected&#10;  const handlePickRide = () =&gt; {&#10;    setShowModal(true);&#10;  };&#10;&#10;  // After ride selection, show mini markers for that type&#10;  const filteredVehicles = selectedRide &amp;&amp; availableVehicles&#10;    ? availableVehicles.filter(v =&gt; v.type === selectedRide)&#10;    : [];&#10;&#10;    const dummyRider = bookedRider || (filteredVehicles.length &gt; 0 ? {&#10;        name: 'Rider One',&#10;        photo: '',&#10;        rating: '4.8',&#10;        type: selectedRide,&#10;        price: '120',&#10;        lat: filteredVehicles[0].lat,&#10;        lng: filteredVehicles[0].lng&#10;      } : null);&#10;    &#10;      // Dummy tracking line from rider to user&#10;      const trackingLine = dummyRider &amp;&amp; currentLocation ? [&#10;        [dummyRider.lat, dummyRider.lng],&#10;        currentLocation&#10;      ] : null;&#10;    &#10;      // Book ride handler&#10;      const handleBookRide = () =&gt; {&#10;        setBookedRider(dummyRider);&#10;        setShowRiderModal(true);&#10;      };&#10;&#10;  return (&#10;    &lt;div style={{ position: 'relative', height: '100%' }}&gt;&#10;      &lt;MapContainer center={currentLocation || [23.8103, 90.4125]} zoom={13} style={{ height: '100%', width: '100%' }} ref={mapRef}&gt;&#10;        &lt;TileLayer&#10;          url=&quot;https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png&quot;&#10;          attribution=&quot;&amp;copy; &lt;a href='https://carto.com/attributions'&gt;CARTO&lt;/a&gt;&quot;&#10;        /&gt;&#10;        {/* Current location marker */}&#10;        {currentLocation &amp;&amp; (&#10;          &lt;Marker position={currentLocation} icon={blueIcon}&gt;&#10;            &lt;Popup&gt;Your current location&lt;/Popup&gt;&#10;          &lt;/Marker&gt;&#10;        )}&#10;        {/* Mini markers for selected ride type */}&#10;        {filteredVehicles.map((vehicle, idx) =&gt; (&#10;          &lt;Marker key={idx} position={[vehicle.lat, vehicle.lng]} icon={createVehicleIcon(vehicle.color)}&gt;&#10;            &lt;Popup&gt;{vehicle.type}&lt;/Popup&gt;&#10;          &lt;/Marker&gt;&#10;        ))}&#10;        {/* Dummy tracking line from rider to user */}&#10;        {trackingLine &amp;&amp; (&#10;            &lt;Polyline positions={trackingLine} color=&quot;red&quot; /&gt;&#10;        )}&#10;        {/* Feature for User's Home Page */}&#10;        {onLocationSelect &amp;&amp; &lt;LocationMarker onLocationSelect={onLocationSelect} /&gt;}&#10;        {selectedLocation &amp;&amp; selectedLocation.latlng &amp;&amp; (&#10;          &lt;Marker position={selectedLocation.latlng} icon={brownIcon}&gt;&#10;            &lt;Popup&gt;Your selected destination&lt;/Popup&gt;&#10;          &lt;/Marker&gt;&#10;        )}&#10;        {/* Features for Driver Dashboard */}&#10;        {driverLocation &amp;&amp; (&#10;          &lt;Marker position={driverLocation} icon={blueIcon}&gt;&#10;            &lt;Popup&gt;Your current location&lt;/Popup&gt;&#10;          &lt;/Marker&gt;&#10;        )}&#10;        {pickupLatLng &amp;&amp; (&#10;          &lt;Marker position={pickupLatLng} icon={brownIcon}&gt;&#10;            &lt;Popup&gt;Pickup: {pickupLocation}&lt;/Popup&gt;&#10;          &lt;/Marker&gt;&#10;        )}&#10;        {destinationLatLng &amp;&amp; (&#10;          &lt;Marker position={destinationLatLng} icon={brownIcon}&gt;&#10;            &lt;Popup&gt;Destination: {destinationLocation || 'Selected Location'}&lt;/Popup&gt;&#10;          &lt;/Marker&gt;&#10;        )}&#10;        {pickupLatLng &amp;&amp; destinationLatLng &amp;&amp; (&#10;          &lt;Polyline positions={[pickupLatLng, destinationLatLng]} color=&quot;blue&quot; /&gt;&#10;        )}&#10;        {/* Current Location Button */}&#10;        &lt;CurrentLocationButton onClick={handleCurrentLocation} /&gt;&#10;      &lt;/MapContainer&gt;&#10;      {/* Pick Ride Button */}&#10;      {selectedLocation &amp;&amp; selectedLocation.latlng &amp;&amp; !selectedRide &amp;&amp; (&#10;        &lt;button&#10;          style={{&#10;            position: 'absolute',&#10;            top: '20px',&#10;            left: '50%',&#10;            transform: 'translateX(-50%)',&#10;            zIndex: 1000,&#10;            padding: '14px 32px',&#10;            background: '#1976d2',&#10;            color: 'white',&#10;            border: 'none',&#10;            borderRadius: '12px',&#10;            fontSize: '20px',&#10;            boxShadow: '0 2px 8px rgba(0,0,0,0.15)',&#10;            cursor: 'pointer'&#10;          }}&#10;          onClick={handlePickRide}&#10;        &gt;Pick Ride&lt;/button&gt;&#10;      )}&#10;      {/* Ride Options Modal */}&#10;      &lt;RideOptionsModal&#10;        visible={showModal}&#10;        onSelect={type =&gt; {&#10;          setSelectedRide(type);&#10;          setShowModal(false);&#10;        }}&#10;        onClose={() =&gt; setShowModal(false)}&#10;      /&gt;&#10;      {/* Book Ride Button (after ride selected) */}&#10;      {selectedRide &amp;&amp; filteredVehicles.length &gt; 0 &amp;&amp; !bookedRider &amp;&amp; (&#10;        &lt;button&#10;          style={{&#10;            position: 'absolute',&#10;            top: '70px',&#10;            left: '50%',&#10;            transform: 'translateX(-50%)',&#10;            zIndex: 1000,&#10;            padding: '14px 32px',&#10;            background: '#28a745',&#10;            color: 'white',&#10;            border: 'none',&#10;            borderRadius: '12px',&#10;            fontSize: '20px',&#10;            boxShadow: '0 2px 8px rgba(0,0,0,0.15)',&#10;            cursor: 'pointer'&#10;          }}&#10;          onClick={handleBookRide}&#10;        &gt;Book Ride&lt;/button&gt;&#10;      )}&#10;      {/* Rider Info Modal (floating window in center) */}&#10;      &lt;RiderInfoModal visible={showRiderModal} rider={dummyRider} onClose={() =&gt; setShowRiderModal(false)} /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default Map;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ridesharex-frontend/src/pages/Home.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ridesharex-frontend/src/pages/Home.js" />
              <option name="originalContent" value="import React, { useState, useEffect, useRef } from &quot;react&quot;;&#10;import { Link } from &quot;react-router-dom&quot;;&#10;import RideService from &quot;../Services/RideService&quot;;&#10;import &quot;../styles/Home.css&quot;;&#10;import L from 'leaflet';&#10;import 'leaflet/dist/leaflet.css';&#10;import 'leaflet-routing-machine';&#10;import 'leaflet-routing-machine/dist/leaflet-routing-machine.css';&#10;&#10;// Fix Leaflet default icon issues in React&#10;delete L.Icon.Default.prototype._getIconUrl;&#10;L.Icon.Default.mergeOptions({&#10;  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',&#10;  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',&#10;  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',&#10;});&#10;&#10;function Home() {&#10;  // State variables for form inputs&#10;  const [pickup, setPickup] = useState(&quot;&quot;);&#10;  const [dropoff, setDropoff] = useState(&quot;&quot;);&#10;  const [date, setDate] = useState(&quot;Today&quot;);&#10;  const [time, setTime] = useState(&quot;Now&quot;);&#10;  const [rides, setRides] = useState([]);&#10;&#10;  // Refs&#10;  const mapRef = useRef(null);&#10;  const mapInstanceRef = useRef(null);&#10;  const pickupMarkerRef = useRef(null);&#10;  const dropoffMarkerRef = useRef(null);&#10;  const routingControlRef = useRef(null);&#10;&#10;  // Dummy locations for demonstration&#10;  const dummyLocations = {&#10;    &quot;Airport&quot;: [23.8513, 90.4061],&#10;    &quot;Dhanmondi&quot;: [23.7461, 90.3742],&#10;    &quot;Gulshan&quot;: [23.7925, 90.4078],&#10;    &quot;Uttara&quot;: [23.8759, 90.3795],&#10;    &quot;Banani&quot;: [23.7937, 90.4066]&#10;  };&#10;&#10;  // Fetch available rides&#10;  useEffect(() =&gt; {&#10;    RideService&#10;      .getAvailableRides()&#10;      .then(data =&gt; {&#10;        console.log(data)&#10;        setRides(data)&#10;      })&#10;      .catch((err) =&gt; console.log(err))&#10;  }, []);&#10;&#10;  // Initialize map with routing control&#10;  useEffect(() =&gt; {&#10;    // Initialize Leaflet map&#10;    if (mapRef.current &amp;&amp; !mapInstanceRef.current) {&#10;      try {&#10;        // Create map instance&#10;        mapInstanceRef.current = L.map(mapRef.current).setView([23.8103, 90.4125], 13); // Centered on Dhaka&#10;&#10;        // Add OpenStreetMap tile layer&#10;        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {&#10;          attribution: '&amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors',&#10;          maxZoom: 19&#10;        }).addTo(mapInstanceRef.current);&#10;&#10;        // Custom icons for pickup and dropoff&#10;        const pickupIcon = L.divIcon({&#10;          html: '&lt;div style=&quot;background-color: #4CAF50; width: 20px; height: 20px; border-radius: 50%; border: 2px solid white;&quot;&gt;&lt;/div&gt;',&#10;          className: 'custom-div-icon',&#10;          iconSize: [20, 20]&#10;        });&#10;&#10;        const dropoffIcon = L.divIcon({&#10;          html: '&lt;div style=&quot;background-color: #f44336; width: 20px; height: 20px; border-radius: 50%; border: 2px solid white;&quot;&gt;&lt;/div&gt;',&#10;          className: 'custom-div-icon',&#10;          iconSize: [20, 20]&#10;        });&#10;&#10;        // Add dummy markers and route&#10;        const startPoint = dummyLocations[&quot;Airport&quot;];&#10;        const endPoint = dummyLocations[&quot;Gulshan&quot;];&#10;&#10;        // Add markers&#10;        L.marker(startPoint, { icon: pickupIcon }).addTo(mapInstanceRef.current)&#10;          .bindPopup('Pickup: Airport');&#10;        L.marker(endPoint, { icon: dropoffIcon }).addTo(mapInstanceRef.current)&#10;          .bindPopup('Dropoff: Gulshan');&#10;&#10;        // Add routing control&#10;        routingControlRef.current = L.Routing.control({&#10;          waypoints: [&#10;            L.latLng(startPoint[0], startPoint[1]),&#10;            L.latLng(endPoint[0], endPoint[1])&#10;          ],&#10;          routeWhileDragging: true,&#10;          lineOptions: {&#10;            styles: [&#10;              { color: 'black', opacity: 0.8, weight: 4 }&#10;            ]&#10;          },&#10;          showAlternatives: false,&#10;          addWaypoints: false,&#10;          draggableWaypoints: false&#10;        }).addTo(mapInstanceRef.current);&#10;&#10;        mapRef.current = mapInstanceRef.current;&#10;      } catch (mapError) {&#10;        console.error('Failed to initialize map:', mapError);&#10;      }&#10;    }&#10;&#10;    return () =&gt; {&#10;      // Cleanup routing control before removing map&#10;      if (&#10;        routingControlRef.current &amp;&amp;&#10;        routingControlRef.current._map // Only remove if attached to a map&#10;      ) {&#10;        try {&#10;          routingControlRef.current.remove();&#10;          routingControlRef.current = null;&#10;        } catch (routingCleanupError) {&#10;          console.warn('Error cleaning up routing control:', routingCleanupError);&#10;        }&#10;      }&#10;      // Cleanup map when component unmounts&#10;      if (mapInstanceRef.current) {&#10;        try {&#10;          mapInstanceRef.current.remove();&#10;          mapInstanceRef.current = null;&#10;        } catch (cleanupError) {&#10;          console.warn('Error cleaning up map:', cleanupError);&#10;        }&#10;      }&#10;    };&#10;  }, []);&#10;&#10;  const handlePickupChange = (e) =&gt; {&#10;    setPickup(e.target.value);&#10;    updateRoute();&#10;  };&#10;&#10;  const handleDropoffChange = (e) =&gt; {&#10;    setDropoff(e.target.value);&#10;    updateRoute();&#10;  };&#10;&#10;  const updateRoute = () =&gt; {&#10;    if (&#10;      routingControlRef.current &amp;&amp;&#10;      pickup &amp;&amp; dropoff &amp;&amp;&#10;      dummyLocations[pickup] &amp;&amp; dummyLocations[dropoff]&#10;    ) {&#10;      routingControlRef.current.setWaypoints([&#10;        L.latLng(dummyLocations[pickup][0], dummyLocations[pickup][1]),&#10;        L.latLng(dummyLocations[dropoff][0], dummyLocations[dropoff][1])&#10;      ]);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;home-container&quot;&gt;&#10;      {/* Top Navigation Bar */}&#10;      &lt;nav className=&quot;top-nav&quot;&gt;&#10;        &lt;div className=&quot;logo&quot;&gt;RideShareX&lt;/div&gt;&#10;        &lt;div className=&quot;nav-links&quot;&gt;&#10;          &lt;Link to=&quot;/&quot;&gt;Drive&lt;/Link&gt;&#10;          &lt;Link to=&quot;/&quot;&gt;Business&lt;/Link&gt;&#10;          &lt;Link to=&quot;/&quot;&gt;Eats&lt;/Link&gt;&#10;          &lt;Link to=&quot;/&quot;&gt;About&lt;/Link&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;auth-links&quot;&gt;&#10;          &lt;Link to=&quot;/login&quot;&gt;Log in&lt;/Link&gt;&#10;          &lt;Link to=&quot;/signup&quot; className=&quot;signup-btn&quot;&gt;Sign up&lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      &lt;/nav&gt;&#10;&#10;      {/* Main Content */}&#10;      &lt;div className=&quot;main-content&quot;&gt;&#10;        &lt;div className=&quot;ride-request-container&quot;&gt;&#10;          &lt;div className=&quot;ride-form&quot;&gt;&#10;            &lt;h1&gt;Request a ride&lt;/h1&gt;&#10;&#10;            &lt;div className=&quot;location-inputs&quot;&gt;&#10;              &lt;div className=&quot;input-group&quot;&gt;&#10;                &lt;span className=&quot;input-icon pickup-icon&quot;&gt;●&lt;/span&gt;&#10;                &lt;select value={pickup} onChange={handlePickupChange}&gt;&#10;                  &lt;option value=&quot;&quot;&gt;Select Pickup Location&lt;/option&gt;&#10;                  {Object.keys(dummyLocations).map(location =&gt; (&#10;                    &lt;option key={location} value={location}&gt;{location}&lt;/option&gt;&#10;                  ))}&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;input-group&quot;&gt;&#10;                &lt;span className=&quot;input-icon dropoff-icon&quot;&gt;■&lt;/span&gt;&#10;                &lt;select value={dropoff} onChange={handleDropoffChange}&gt;&#10;                  &lt;option value=&quot;&quot;&gt;Select Dropoff Location&lt;/option&gt;&#10;                  {Object.keys(dummyLocations).map(location =&gt; (&#10;                    &lt;option key={location} value={location}&gt;{location}&lt;/option&gt;&#10;                  ))}&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;datetime-selector&quot;&gt;&#10;              &lt;div className=&quot;date-selector&quot;&gt;&#10;                &lt;label&gt;Date&lt;/label&gt;&#10;                &lt;div className=&quot;selector-input&quot;&gt;&#10;                  &lt;span className=&quot;calendar-icon&quot;&gt;&lt;/span&gt;&#10;                  &lt;select value={date} onChange={(e) =&gt; setDate(e.target.value)}&gt;&#10;                    &lt;option&gt;Today&lt;/option&gt;&#10;                    &lt;option&gt;Tomorrow&lt;/option&gt;&#10;                    &lt;option&gt;Select date&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;time-selector&quot;&gt;&#10;                &lt;label&gt;Time&lt;/label&gt;&#10;                &lt;div className=&quot;selector-input&quot;&gt;&#10;                  &lt;span className=&quot;time-icon&quot;&gt;⏰&lt;/span&gt;&#10;                  &lt;select value={time} onChange={(e) =&gt; setTime(e.target.value)}&gt;&#10;                    &lt;option&gt;Now&lt;/option&gt;&#10;                    &lt;option&gt;15 minutes&lt;/option&gt;&#10;                    &lt;option&gt;30 minutes&lt;/option&gt;&#10;                    &lt;option&gt;45 minutes&lt;/option&gt;&#10;                    &lt;option&gt;1 hour&lt;/option&gt;&#10;                    &lt;option&gt;Select time&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;button className=&quot;see-prices-btn&quot;&gt;See prices&lt;/button&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;map-placeholder&quot;&gt;&#10;            &lt;div className=&quot;map-container&quot; ref={mapRef}&gt;&#10;              {/* Leaflet will initialize here */}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Suggestions Section */}&#10;        &lt;div className=&quot;suggestions-section&quot;&gt;&#10;          &lt;h2&gt;Suggestions&lt;/h2&gt;&#10;&#10;          &lt;div className=&quot;suggestion-cards&quot;&gt;&#10;            &lt;div className=&quot;suggestion-card&quot;&gt;&#10;              &lt;div className=&quot;card-content&quot;&gt;&#10;                &lt;h3&gt;Ride&lt;/h3&gt;&#10;                &lt;p&gt;Get there on demand&lt;/p&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;card-icon&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;suggestion-card&quot;&gt;&#10;              &lt;div className=&quot;card-content&quot;&gt;&#10;                &lt;h3&gt;Reserve&lt;/h3&gt;&#10;                &lt;p&gt;Plan ahead by the hour&lt;/p&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;card-icon&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;suggestion-card&quot;&gt;&#10;              &lt;div className=&quot;card-content&quot;&gt;&#10;                &lt;h3&gt;Intercity&lt;/h3&gt;&#10;                &lt;p&gt;Travel between cities&lt;/p&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;card-icon&quot;&gt;️&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default Home;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect, useRef } from &quot;react&quot;;&#10;import { Link } from &quot;react-router-dom&quot;;&#10;import RideService from &quot;../Services/RideService&quot;;&#10;import &quot;../styles/Home.css&quot;;&#10;import L from 'leaflet';&#10;import 'leaflet/dist/leaflet.css';&#10;import 'leaflet-routing-machine';&#10;import 'leaflet-routing-machine/dist/leaflet-routing-machine.css';&#10;&#10;// Fix Leaflet default icon issues in React&#10;delete L.Icon.Default.prototype._getIconUrl;&#10;L.Icon.Default.mergeOptions({&#10;  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',&#10;  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',&#10;  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',&#10;});&#10;&#10;function Home() {&#10;  // State variables for form inputs&#10;  const [pickup, setPickup] = useState(&quot;&quot;);&#10;  const [dropoff, setDropoff] = useState(&quot;&quot;);&#10;  const [date, setDate] = useState(&quot;Today&quot;);&#10;  const [time, setTime] = useState(&quot;Now&quot;);&#10;  const [rides, setRides] = useState([]);&#10;&#10;  // Refs&#10;  const mapRef = useRef(null);&#10;  const mapInstanceRef = useRef(null);&#10;  const pickupMarkerRef = useRef(null);&#10;  const dropoffMarkerRef = useRef(null);&#10;  const routingControlRef = useRef(null);&#10;&#10;  // Dummy locations for demonstration&#10;  const dummyLocations = {&#10;    &quot;Airport&quot;: [23.8513, 90.4061],&#10;    &quot;Dhanmondi&quot;: [23.7461, 90.3742],&#10;    &quot;Gulshan&quot;: [23.7925, 90.4078],&#10;    &quot;Uttara&quot;: [23.8759, 90.3795],&#10;    &quot;Banani&quot;: [23.7937, 90.4066]&#10;  };&#10;&#10;  // Fetch available rides&#10;  useEffect(() =&gt; {&#10;    RideService&#10;      .getAvailableRides()&#10;      .then(data =&gt; {&#10;        console.log(data)&#10;        setRides(data)&#10;      })&#10;      .catch((err) =&gt; console.log(err))&#10;  }, []);&#10;&#10;  // Initialize map with routing control&#10;  useEffect(() =&gt; {&#10;    if (!mapRef.current || mapInstanceRef.current) return;&#10;&#10;    try {&#10;      // Create map instance&#10;      mapInstanceRef.current = L.map(mapRef.current).setView([23.8103, 90.4125], 13);&#10;&#10;      // Add OpenStreetMap tile layer&#10;      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {&#10;        attribution: '© OpenStreetMap contributors'&#10;      }).addTo(mapInstanceRef.current);&#10;&#10;      // Custom icons for pickup and dropoff&#10;      const pickupIcon = L.divIcon({&#10;        html: '&lt;div style=&quot;background-color: #4CAF50; width: 20px; height: 20px; border-radius: 50%; border: 2px solid white;&quot;&gt;&lt;/div&gt;',&#10;        className: 'custom-div-icon',&#10;        iconSize: [20, 20]&#10;      });&#10;&#10;      const dropoffIcon = L.divIcon({&#10;        html: '&lt;div style=&quot;background-color: #f44336; width: 20px; height: 20px; border-radius: 50%; border: 2px solid white;&quot;&gt;&lt;/div&gt;',&#10;        className: 'custom-div-icon',&#10;        iconSize: [20, 20]&#10;      });&#10;&#10;      // Initial points&#10;      const startPoint = dummyLocations[&quot;Airport&quot;];&#10;      const endPoint = dummyLocations[&quot;Gulshan&quot;];&#10;&#10;      // Add initial markers&#10;      pickupMarkerRef.current = L.marker(startPoint, { icon: pickupIcon })&#10;        .addTo(mapInstanceRef.current)&#10;        .bindPopup('Pickup: Airport');&#10;&#10;      dropoffMarkerRef.current = L.marker(endPoint, { icon: dropoffIcon })&#10;        .addTo(mapInstanceRef.current)&#10;        .bindPopup('Dropoff: Gulshan');&#10;&#10;      // Initialize routing control with OSRM demo server&#10;      routingControlRef.current = L.Routing.control({&#10;        router: L.Routing.osrmv1({&#10;          serviceUrl: 'https://router.project-osrm.org/route/v1',&#10;          profile: 'driving'&#10;        }),&#10;        waypoints: [&#10;          L.latLng(startPoint[0], startPoint[1]),&#10;          L.latLng(endPoint[0], endPoint[1])&#10;        ],&#10;        routeWhileDragging: false,&#10;        addWaypoints: false,&#10;        draggableWaypoints: false,&#10;        lineOptions: {&#10;          styles: [{ color: 'black', opacity: 0.8, weight: 4 }]&#10;        },&#10;        show: false, // Don't show the instruction panel&#10;        collapsible: true&#10;      });&#10;&#10;      // Add routing control to map after a small delay&#10;      setTimeout(() =&gt; {&#10;        if (mapInstanceRef.current) {&#10;          routingControlRef.current.addTo(mapInstanceRef.current);&#10;        }&#10;      }, 100);&#10;&#10;    } catch (error) {&#10;      console.error('Map initialization error:', error);&#10;    }&#10;&#10;    // Cleanup function&#10;    return () =&gt; {&#10;      try {&#10;        if (pickupMarkerRef.current) {&#10;          pickupMarkerRef.current.remove();&#10;        }&#10;        if (dropoffMarkerRef.current) {&#10;          dropoffMarkerRef.current.remove();&#10;        }&#10;        if (routingControlRef.current &amp;&amp; routingControlRef.current._container) {&#10;          routingControlRef.current.remove();&#10;        }&#10;        if (mapInstanceRef.current) {&#10;          mapInstanceRef.current.remove();&#10;        }&#10;      } catch (error) {&#10;        console.warn('Cleanup error:', error);&#10;      }&#10;      &#10;      // Reset all refs&#10;      mapInstanceRef.current = null;&#10;      pickupMarkerRef.current = null;&#10;      dropoffMarkerRef.current = null;&#10;      routingControlRef.current = null;&#10;    };&#10;  }, []);&#10;&#10;  const handlePickupChange = (e) =&gt; {&#10;    setPickup(e.target.value);&#10;    updateRoute();&#10;  };&#10;&#10;  const handleDropoffChange = (e) =&gt; {&#10;    setDropoff(e.target.value);&#10;    updateRoute();&#10;  };&#10;&#10;  const updateRoute = () =&gt; {&#10;    if (!mapInstanceRef.current || !pickup || !dropoff) return;&#10;&#10;    const pickupCoords = dummyLocations[pickup];&#10;    const dropoffCoords = dummyLocations[dropoff];&#10;&#10;    if (!pickupCoords || !dropoffCoords) return;&#10;&#10;    try {&#10;      // Update markers&#10;      if (pickupMarkerRef.current) {&#10;        pickupMarkerRef.current.setLatLng(pickupCoords);&#10;        pickupMarkerRef.current.bindPopup(`Pickup: ${pickup}`);&#10;      }&#10;      &#10;      if (dropoffMarkerRef.current) {&#10;        dropoffMarkerRef.current.setLatLng(dropoffCoords);&#10;        dropoffMarkerRef.current.bindPopup(`Dropoff: ${dropoff}`);&#10;      }&#10;&#10;      // Update route&#10;      if (routingControlRef.current) {&#10;        routingControlRef.current.setWaypoints([&#10;          L.latLng(pickupCoords[0], pickupCoords[1]),&#10;          L.latLng(dropoffCoords[0], dropoffCoords[1])&#10;        ]);&#10;      }&#10;&#10;      // Fit bounds to show both markers&#10;      const bounds = L.latLngBounds([pickupCoords, dropoffCoords]);&#10;      mapInstanceRef.current.fitBounds(bounds, { padding: [50, 50] });&#10;&#10;    } catch (error) {&#10;      console.error('Route update error:', error);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;home-container&quot;&gt;&#10;      {/* Top Navigation Bar */}&#10;      &lt;nav className=&quot;top-nav&quot;&gt;&#10;        &lt;div className=&quot;logo&quot;&gt;RideShareX&lt;/div&gt;&#10;        &lt;div className=&quot;nav-links&quot;&gt;&#10;          &lt;Link to=&quot;/&quot;&gt;Drive&lt;/Link&gt;&#10;          &lt;Link to=&quot;/&quot;&gt;Business&lt;/Link&gt;&#10;          &lt;Link to=&quot;/&quot;&gt;Eats&lt;/Link&gt;&#10;          &lt;Link to=&quot;/&quot;&gt;About&lt;/Link&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;auth-links&quot;&gt;&#10;          &lt;Link to=&quot;/login&quot;&gt;Log in&lt;/Link&gt;&#10;          &lt;Link to=&quot;/signup&quot; className=&quot;signup-btn&quot;&gt;Sign up&lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      &lt;/nav&gt;&#10;&#10;      {/* Main Content */}&#10;      &lt;div className=&quot;main-content&quot;&gt;&#10;        &lt;div className=&quot;ride-request-container&quot;&gt;&#10;          &lt;div className=&quot;ride-form&quot;&gt;&#10;            &lt;h1&gt;Request a ride&lt;/h1&gt;&#10;&#10;            &lt;div className=&quot;location-inputs&quot;&gt;&#10;              &lt;div className=&quot;input-group&quot;&gt;&#10;                &lt;span className=&quot;input-icon pickup-icon&quot;&gt;●&lt;/span&gt;&#10;                &lt;select value={pickup} onChange={handlePickupChange}&gt;&#10;                  &lt;option value=&quot;&quot;&gt;Select Pickup Location&lt;/option&gt;&#10;                  {Object.keys(dummyLocations).map(location =&gt; (&#10;                    &lt;option key={location} value={location}&gt;{location}&lt;/option&gt;&#10;                  ))}&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;input-group&quot;&gt;&#10;                &lt;span className=&quot;input-icon dropoff-icon&quot;&gt;■&lt;/span&gt;&#10;                &lt;select value={dropoff} onChange={handleDropoffChange}&gt;&#10;                  &lt;option value=&quot;&quot;&gt;Select Dropoff Location&lt;/option&gt;&#10;                  {Object.keys(dummyLocations).map(location =&gt; (&#10;                    &lt;option key={location} value={location}&gt;{location}&lt;/option&gt;&#10;                  ))}&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;datetime-selector&quot;&gt;&#10;              &lt;div className=&quot;date-selector&quot;&gt;&#10;                &lt;label&gt;Date&lt;/label&gt;&#10;                &lt;div className=&quot;selector-input&quot;&gt;&#10;                  &lt;span className=&quot;calendar-icon&quot;&gt;&lt;/span&gt;&#10;                  &lt;select value={date} onChange={(e) =&gt; setDate(e.target.value)}&gt;&#10;                    &lt;option&gt;Today&lt;/option&gt;&#10;                    &lt;option&gt;Tomorrow&lt;/option&gt;&#10;                    &lt;option&gt;Select date&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;time-selector&quot;&gt;&#10;                &lt;label&gt;Time&lt;/label&gt;&#10;                &lt;div className=&quot;selector-input&quot;&gt;&#10;                  &lt;span className=&quot;time-icon&quot;&gt;⏰&lt;/span&gt;&#10;                  &lt;select value={time} onChange={(e) =&gt; setTime(e.target.value)}&gt;&#10;                    &lt;option&gt;Now&lt;/option&gt;&#10;                    &lt;option&gt;15 minutes&lt;/option&gt;&#10;                    &lt;option&gt;30 minutes&lt;/option&gt;&#10;                    &lt;option&gt;45 minutes&lt;/option&gt;&#10;                    &lt;option&gt;1 hour&lt;/option&gt;&#10;                    &lt;option&gt;Select time&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;button className=&quot;see-prices-btn&quot;&gt;See prices&lt;/button&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;map-placeholder&quot;&gt;&#10;            &lt;div className=&quot;map-container&quot; ref={mapRef}&gt;&#10;              {/* Leaflet will initialize here */}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Suggestions Section */}&#10;        &lt;div className=&quot;suggestions-section&quot;&gt;&#10;          &lt;h2&gt;Suggestions&lt;/h2&gt;&#10;&#10;          &lt;div className=&quot;suggestion-cards&quot;&gt;&#10;            &lt;div className=&quot;suggestion-card&quot;&gt;&#10;              &lt;div className=&quot;card-content&quot;&gt;&#10;                &lt;h3&gt;Ride&lt;/h3&gt;&#10;                &lt;p&gt;Get there on demand&lt;/p&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;card-icon&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;suggestion-card&quot;&gt;&#10;              &lt;div className=&quot;card-content&quot;&gt;&#10;                &lt;h3&gt;Reserve&lt;/h3&gt;&#10;                &lt;p&gt;Plan ahead by the hour&lt;/p&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;card-icon&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;suggestion-card&quot;&gt;&#10;              &lt;div className=&quot;card-content&quot;&gt;&#10;                &lt;h3&gt;Intercity&lt;/h3&gt;&#10;                &lt;p&gt;Travel between cities&lt;/p&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;card-icon&quot;&gt;️&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default Home;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ridesharex-frontend/src/pages/Login.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ridesharex-frontend/src/pages/Login.js" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { Link, useNavigate } from 'react-router-dom';&#10;import '../styles/Auth.css';&#10;&#10;function Login() {&#10;  const [formData, setFormData] = useState({&#10;    email: '',&#10;    password: '',&#10;  });&#10;  const [error, setError] = useState('');&#10;  const navigate = useNavigate();&#10;&#10;  const handleChange = (e) =&gt; {&#10;    const { name, value } = e.target;&#10;    setFormData(prevState =&gt; ({&#10;      ...prevState,&#10;      [name]: value&#10;    }));&#10;  };&#10;&#10;  const handleSubmit = async (e) =&gt; {&#10;    e.preventDefault();&#10;    setError('');&#10;&#10;    try {&#10;      const response = await fetch('http://localhost:8080/auth/login', {&#10;        method: 'POST',&#10;        headers: { 'Content-Type': 'application/json' },&#10;        body: JSON.stringify({ email: formData.email, password: formData.password })&#10;      });&#10;      const data = await response.json();&#10;      if (response.ok) {&#10;        alert('Login successful!');&#10;        // Save user/token as needed&#10;        navigate('/');&#10;      } else {&#10;        setError(data.error || 'Login failed');&#10;      }&#10;    } catch (err) {&#10;      setError('Server error');&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;auth-container&quot;&gt;&#10;      &lt;div className=&quot;auth-box&quot;&gt;&#10;        &lt;div className=&quot;auth-header&quot;&gt;&#10;          &lt;h1&gt;Welcome back&lt;/h1&gt;&#10;          &lt;p&gt;Sign in to continue to RideShareX&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form className=&quot;auth-form&quot; onSubmit={handleSubmit}&gt;&#10;          {error &amp;&amp; &lt;div className=&quot;error-message&quot;&gt;{error}&lt;/div&gt;}&#10;&#10;          &lt;div className=&quot;form-group&quot;&gt;&#10;            &lt;label htmlFor=&quot;email&quot;&gt;Email&lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;email&quot;&#10;              id=&quot;email&quot;&#10;              name=&quot;email&quot;&#10;              value={formData.email}&#10;              onChange={handleChange}&#10;              placeholder=&quot;Enter your email&quot;&#10;              required&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;form-group&quot;&gt;&#10;            &lt;label htmlFor=&quot;password&quot;&gt;Password&lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;password&quot;&#10;              id=&quot;password&quot;&#10;              name=&quot;password&quot;&#10;              value={formData.password}&#10;              onChange={handleChange}&#10;              placeholder=&quot;Enter your password&quot;&#10;              required&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;button type=&quot;submit&quot; className=&quot;auth-button&quot;&gt;&#10;            Sign In&#10;          &lt;/button&gt;&#10;&#10;          &lt;div className=&quot;auth-divider&quot;&gt;&#10;            &lt;span&gt;OR&lt;/span&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;social-login&quot;&gt;&#10;            &lt;button type=&quot;button&quot; className=&quot;social-button&quot;&gt;&#10;              &lt;img src=&quot;https://cdn-icons-png.flaticon.com/512/2991/2991148.png&quot; alt=&quot;Google&quot; /&gt;&#10;              Continue with Google&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/form&gt;&#10;&#10;        &lt;div className=&quot;auth-footer&quot;&gt;&#10;          Don't have an account?&#10;          &lt;Link to=&quot;/signup&quot;&gt;Sign up&lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default Login;&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { Link, useNavigate } from 'react-router-dom';&#10;import UserService from '../Services/UserService';&#10;import '../styles/Auth.css';&#10;&#10;function Login() {&#10;  const [formData, setFormData] = useState({&#10;    email: '',&#10;    password: '',&#10;  });&#10;  const [error, setError] = useState('');&#10;  const navigate = useNavigate();&#10;&#10;  const handleChange = (e) =&gt; {&#10;    const { name, value } = e.target;&#10;    setFormData(prevState =&gt; ({&#10;      ...prevState,&#10;      [name]: value&#10;    }));&#10;  };&#10;&#10;  const handleSubmit = async (e) =&gt; {&#10;    e.preventDefault();&#10;    setError('');&#10;&#10;    try {&#10;      await UserService.login(formData);&#10;      navigate('/');&#10;    } catch (err) {&#10;      setError(err.message || 'Invalid email or password');&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;auth-container&quot;&gt;&#10;      &lt;div className=&quot;auth-box&quot;&gt;&#10;        &lt;div className=&quot;auth-header&quot;&gt;&#10;          &lt;h1&gt;Welcome back&lt;/h1&gt;&#10;          &lt;p&gt;Sign in to continue to RideShareX&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form className=&quot;auth-form&quot; onSubmit={handleSubmit}&gt;&#10;          {error &amp;&amp; &lt;div className=&quot;error-message&quot;&gt;{error}&lt;/div&gt;}&#10;&#10;          &lt;div className=&quot;form-group&quot;&gt;&#10;            &lt;label htmlFor=&quot;email&quot;&gt;Email&lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;email&quot;&#10;              id=&quot;email&quot;&#10;              name=&quot;email&quot;&#10;              value={formData.email}&#10;              onChange={handleChange}&#10;              placeholder=&quot;Enter your email&quot;&#10;              required&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;form-group&quot;&gt;&#10;            &lt;label htmlFor=&quot;password&quot;&gt;Password&lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;password&quot;&#10;              id=&quot;password&quot;&#10;              name=&quot;password&quot;&#10;              value={formData.password}&#10;              onChange={handleChange}&#10;              placeholder=&quot;Enter your password&quot;&#10;              required&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;button type=&quot;submit&quot; className=&quot;auth-button&quot;&gt;&#10;            Sign In&#10;          &lt;/button&gt;&#10;&#10;          &lt;div className=&quot;auth-divider&quot;&gt;&#10;            &lt;span&gt;OR&lt;/span&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;social-login&quot;&gt;&#10;            &lt;button type=&quot;button&quot; className=&quot;social-button&quot;&gt;&#10;              &lt;img src=&quot;https://cdn-icons-png.flaticon.com/512/2991/2991148.png&quot; alt=&quot;Google&quot; /&gt;&#10;              Continue with Google&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/form&gt;&#10;&#10;        &lt;div className=&quot;auth-footer&quot;&gt;&#10;          Don't have an account?&#10;          &lt;Link to=&quot;/signup&quot;&gt;Sign up&lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default Login;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ridesharex-frontend/src/pages/Register.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ridesharex-frontend/src/pages/Register.js" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { useNavigate, Link } from 'react-router-dom';&#10;import AuthService from '../Services/AuthService';&#10;&#10;function Register() {&#10;  const [username, setUsername] = useState('');&#10;  const [email, setEmail] = useState('');&#10;  const [password, setPassword] = useState('');&#10;  const [error, setError] = useState('');&#10;  const [success, setSuccess] = useState('');&#10;  const navigate = useNavigate();&#10;&#10;  const handleSubmit = async (e) =&gt; {&#10;    e.preventDefault();&#10;    setError('');&#10;    setSuccess('');&#10;    try {&#10;      await AuthService.register(username, email, password, ['user']);&#10;      setSuccess('Registration successful! You can now log in.');&#10;      setTimeout(() =&gt; navigate('/login'), 1500);&#10;    } catch (err) {&#10;      const errorMessage =&#10;        (err.response &amp;&amp; err.response.data &amp;&amp; err.response.data.message) ||&#10;        err.message ||&#10;        err.toString();&#10;      setError(errorMessage);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;login-container&quot;&gt;&#10;      &lt;div className=&quot;login-card&quot;&gt;&#10;        &lt;h2&gt;Sign Up&lt;/h2&gt;&#10;        {error &amp;&amp; &lt;div style={{color: 'red', marginBottom: '16px'}}&gt;{error}&lt;/div&gt;}&#10;        {success &amp;&amp; &lt;div style={{color: 'green', marginBottom: '16px'}}&gt;{success}&lt;/div&gt;}&#10;        &lt;form onSubmit={handleSubmit}&gt;&#10;          &lt;div className=&quot;form-group&quot;&gt;&#10;            &lt;label&gt;Username:&lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;text&quot;&#10;              value={username}&#10;              onChange={(e) =&gt; setUsername(e.target.value)}&#10;              required&#10;              className=&quot;input-field&quot;&#10;              autoComplete=&quot;username&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;form-group&quot;&gt;&#10;            &lt;label&gt;Email:&lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;email&quot;&#10;              value={email}&#10;              onChange={(e) =&gt; setEmail(e.target.value)}&#10;              required&#10;              className=&quot;input-field&quot;&#10;              autoComplete=&quot;email&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;form-group&quot;&gt;&#10;            &lt;label&gt;Password:&lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;password&quot;&#10;              value={password}&#10;              onChange={(e) =&gt; setPassword(e.target.value)}&#10;              required&#10;              className=&quot;input-field&quot;&#10;              autoComplete=&quot;new-password&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;button type=&quot;submit&quot; className=&quot;login-btn&quot;&gt;Sign Up&lt;/button&gt;&#10;        &lt;/form&gt;&#10;        &lt;div style={{marginTop: '16px', textAlign: 'center'}}&gt;&#10;          &lt;span&gt;Already have an account?&lt;/span&gt;&#10;          &lt;Link to=&quot;/login&quot; className=&quot;signup-link&quot;&gt; Login&lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default Register;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ridesharex-frontend/src/pages/Signup.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ridesharex-frontend/src/pages/Signup.js" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { Link, useNavigate } from 'react-router-dom';&#10;import UserService from '../Services/UserService';&#10;import '../styles/Auth.css';&#10;&#10;function Signup() {&#10;  const [formData, setFormData] = useState({&#10;    fullName: '',&#10;    email: '',&#10;    password: '',&#10;    confirmPassword: '',&#10;    phoneNumber: ''&#10;  });&#10;  const [error, setError] = useState('');&#10;  const [isLoading, setIsLoading] = useState(false);&#10;  const [validations, setValidations] = useState({&#10;    fullName: { isValid: false, message: '' },&#10;    email: { isValid: false, message: '' },&#10;    phoneNumber: { isValid: false, message: '' },&#10;    password: { isValid: false, message: '', strength: '' }&#10;  });&#10;  const navigate = useNavigate();&#10;&#10;  const validateField = (name, value) =&gt; {&#10;    switch (name) {&#10;      case 'fullName':&#10;        return {&#10;          isValid: value.trim().length &gt;= 2,&#10;          message: value.trim().length &gt;= 2 ? '✓ Valid name' : 'Name is too short'&#10;        };&#10;      case 'email':&#10;        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;&#10;        return {&#10;          isValid: emailRegex.test(value),&#10;          message: emailRegex.test(value) ? '✓ Valid email' : 'Invalid email format'&#10;        };&#10;      case 'phoneNumber':&#10;        const phoneRegex = /^\+?[\d\s-]{10,}$/;&#10;        return {&#10;          isValid: phoneRegex.test(value),&#10;          message: phoneRegex.test(value) ? '✓ Valid phone number' : 'Invalid phone number'&#10;        };&#10;      case 'password':&#10;        const strongRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&amp;*])(?=.{8,})/;&#10;        const mediumRegex = /^(?=.*[a-zA-Z])(?=.*[0-9])(?=.{6,})/;&#10;        let strength = '';&#10;        let isValid = false;&#10;        let message = '';&#10;&#10;        if (strongRegex.test(value)) {&#10;          strength = 'strong';&#10;          isValid = true;&#10;          message = '✓ Strong password';&#10;        } else if (mediumRegex.test(value)) {&#10;          strength = 'medium';&#10;          isValid = true;&#10;          message = 'Password is moderate';&#10;        } else if (value.length &gt;= 6) {&#10;          strength = 'weak';&#10;          isValid = true;&#10;          message = 'Password is weak';&#10;        } else {&#10;          strength = 'weak';&#10;          message = 'Password is too weak';&#10;        }&#10;        return { isValid, message, strength };&#10;      default:&#10;        return { isValid: false, message: '' };&#10;    }&#10;  };&#10;&#10;  const handleChange = (e) =&gt; {&#10;    const { name, value } = e.target;&#10;    setFormData(prev =&gt; ({ ...prev, [name]: value }));&#10;&#10;    const validation = validateField(name, value);&#10;    setValidations(prev =&gt; ({&#10;      ...prev,&#10;      [name]: validation&#10;    }));&#10;  };&#10;&#10;  const handleSubmit = async (e) =&gt; {&#10;    e.preventDefault();&#10;    setError('');&#10;&#10;    if (!Object.values(validations).every(v =&gt; v.isValid)) {&#10;      setError('Please fill all fields correctly');&#10;      return;&#10;    }&#10;&#10;    if (formData.password !== formData.confirmPassword) {&#10;      setError('Passwords do not match');&#10;      return;&#10;    }&#10;&#10;    setIsLoading(true);&#10;    try {&#10;      await UserService.register({&#10;        name: formData.fullName,&#10;        email: formData.email,&#10;        password: formData.password,&#10;        phoneNumber: formData.phoneNumber&#10;      });&#10;      navigate('/login', {&#10;        state: { message: 'Registration successful! Please login.' }&#10;      });&#10;    } catch (err) {&#10;      setError(err.message || 'Registration failed. Please try again.');&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;auth-container&quot;&gt;&#10;      &lt;div className=&quot;auth-box&quot;&gt;&#10;        &lt;div className=&quot;auth-header&quot;&gt;&#10;          &lt;h1&gt;Join RideShareX&lt;/h1&gt;&#10;          &lt;p&gt;Create an account to get started&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form className=&quot;auth-form&quot; onSubmit={handleSubmit}&gt;&#10;          {error &amp;&amp; &lt;div className=&quot;error-message&quot;&gt;{error}&lt;/div&gt;}&#10;&#10;          &lt;div className={`form-group ${validations.fullName?.isValid ? 'success' : ''}`}&gt;&#10;            &lt;label htmlFor=&quot;fullName&quot;&gt;Full Name&lt;/label&gt;&#10;            &lt;span className=&quot;input-icon&quot;&gt;&lt;/span&gt;&#10;            &lt;input&#10;              type=&quot;text&quot;&#10;              id=&quot;fullName&quot;&#10;              name=&quot;fullName&quot;&#10;              value={formData.fullName}&#10;              onChange={handleChange}&#10;              placeholder=&quot;Enter your full name&quot;&#10;              autoComplete=&quot;name&quot;&#10;              required&#10;            /&gt;&#10;            {formData.fullName &amp;&amp; (&#10;              &lt;div className={`validation-message ${validations.fullName?.isValid ? 'success' : 'error'}`}&gt;&#10;                {validations.fullName?.message}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className={`form-group ${validations.email?.isValid ? 'success' : ''}`}&gt;&#10;            &lt;label htmlFor=&quot;email&quot;&gt;Email&lt;/label&gt;&#10;            &lt;span className=&quot;input-icon&quot;&gt;✉️&lt;/span&gt;&#10;            &lt;input&#10;              type=&quot;email&quot;&#10;              id=&quot;email&quot;&#10;              name=&quot;email&quot;&#10;              value={formData.email}&#10;              onChange={handleChange}&#10;              placeholder=&quot;Enter your email&quot;&#10;              autoComplete=&quot;email&quot;&#10;              required&#10;            /&gt;&#10;            {formData.email &amp;&amp; (&#10;              &lt;div className={`validation-message ${validations.email?.isValid ? 'success' : 'error'}`}&gt;&#10;                {validations.email?.message}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className={`form-group ${validations.phoneNumber?.isValid ? 'success' : ''}`}&gt;&#10;            &lt;label htmlFor=&quot;phoneNumber&quot;&gt;Phone Number&lt;/label&gt;&#10;            &lt;span className=&quot;input-icon&quot;&gt;&lt;/span&gt;&#10;            &lt;input&#10;              type=&quot;tel&quot;&#10;              id=&quot;phoneNumber&quot;&#10;              name=&quot;phoneNumber&quot;&#10;              value={formData.phoneNumber}&#10;              onChange={handleChange}&#10;              placeholder=&quot;Enter your phone number&quot;&#10;              autoComplete=&quot;tel&quot;&#10;              required&#10;            /&gt;&#10;            {formData.phoneNumber &amp;&amp; (&#10;              &lt;div className={`validation-message ${validations.phoneNumber?.isValid ? 'success' : 'error'}`}&gt;&#10;                {validations.phoneNumber?.message}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className={`form-group ${validations.password?.isValid ? 'success' : ''}`}&gt;&#10;            &lt;label htmlFor=&quot;password&quot;&gt;Password&lt;/label&gt;&#10;            &lt;span className=&quot;input-icon&quot;&gt;&lt;/span&gt;&#10;            &lt;input&#10;              type=&quot;password&quot;&#10;              id=&quot;password&quot;&#10;              name=&quot;password&quot;&#10;              value={formData.password}&#10;              onChange={handleChange}&#10;              placeholder=&quot;Create a strong password&quot;&#10;              autoComplete=&quot;new-password&quot;&#10;              required&#10;            /&gt;&#10;            {formData.password &amp;&amp; (&#10;              &lt;&gt;&#10;                &lt;div className=&quot;password-strength&quot;&gt;&#10;                  &lt;div className={`password-strength-bar ${validations.password?.strength || ''}`}&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className={`validation-message ${validations.password?.isValid ? 'success' : 'error'}`}&gt;&#10;                  {validations.password?.message}&#10;                &lt;/div&gt;&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;form-group&quot;&gt;&#10;            &lt;label htmlFor=&quot;confirmPassword&quot;&gt;Confirm Password&lt;/label&gt;&#10;            &lt;span className=&quot;input-icon&quot;&gt;&lt;/span&gt;&#10;            &lt;input&#10;              type=&quot;password&quot;&#10;              id=&quot;confirmPassword&quot;&#10;              name=&quot;confirmPassword&quot;&#10;              value={formData.confirmPassword}&#10;              onChange={handleChange}&#10;              placeholder=&quot;Confirm your password&quot;&#10;              autoComplete=&quot;new-password&quot;&#10;              required&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;button&#10;            type=&quot;submit&quot;&#10;            className=&quot;auth-button&quot;&#10;            disabled={isLoading || !Object.values(validations).every(v =&gt; v?.isValid)}&#10;          &gt;&#10;            {isLoading ? (&#10;              &lt;&gt;&#10;                Creating Account&#10;                &lt;span className=&quot;spinner&quot;&gt;&lt;/span&gt;&#10;              &lt;/&gt;&#10;            ) : (&#10;              'Create Account'&#10;            )}&#10;          &lt;/button&gt;&#10;&#10;          &lt;div className=&quot;auth-divider&quot;&gt;&#10;            &lt;span&gt;OR&lt;/span&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;social-login&quot;&gt;&#10;            &lt;button type=&quot;button&quot; className=&quot;social-button&quot;&gt;&#10;              &lt;img&#10;                src=&quot;https://www.google.com/favicon.ico&quot;&#10;                alt=&quot;Google&quot;&#10;              /&gt;&#10;              Sign up with Google&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/form&gt;&#10;&#10;        &lt;div className=&quot;auth-footer&quot;&gt;&#10;          Already have an account?&#10;          &lt;Link to=&quot;/login&quot;&gt;Sign in&lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default Signup;&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { Link, useNavigate } from 'react-router-dom';&#10;import UserService from '../Services/UserService';&#10;import '../styles/Auth.css';&#10;&#10;function Signup() {&#10;  const [formData, setFormData] = useState({&#10;    fullName: '',&#10;    email: '',&#10;    password: '',&#10;    confirmPassword: '',&#10;    phoneNumber: ''&#10;  });&#10;  const [error, setError] = useState('');&#10;  const [isLoading, setIsLoading] = useState(false);&#10;  const [validations, setValidations] = useState({&#10;    fullName: { isValid: false, message: '' },&#10;    email: { isValid: false, message: '' },&#10;    phoneNumber: { isValid: false, message: '' },&#10;    password: { isValid: false, message: '', strength: '' }&#10;  });&#10;&#10;  const navigate = useNavigate();&#10;&#10;  const validateField = (name, value) =&gt; {&#10;    switch (name) {&#10;      case 'fullName':&#10;        return {&#10;          isValid: value.trim().length &gt;= 2,&#10;          message: value.trim().length &gt;= 2 ? '✓ Valid name' : 'Name is too short'&#10;        };&#10;      case 'email':&#10;        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;&#10;        return {&#10;          isValid: emailRegex.test(value),&#10;          message: emailRegex.test(value) ? '✓ Valid email' : 'Invalid email format'&#10;        };&#10;      case 'phoneNumber':&#10;        const phoneRegex = /^\+?[\d\s-]{10,}$/;&#10;        return {&#10;          isValid: phoneRegex.test(value),&#10;          message: phoneRegex.test(value) ? '✓ Valid phone number' : 'Invalid phone number'&#10;        };&#10;      case 'password':&#10;        const strongRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&amp;*])(?=.{8,})/;&#10;        const mediumRegex = /^(?=.*[a-zA-Z])(?=.*[0-9])(?=.{6,})/;&#10;        let strength = '';&#10;        let isValid = false;&#10;        let message = '';&#10;&#10;        if (strongRegex.test(value)) {&#10;          strength = 'strong';&#10;          isValid = true;&#10;          message = '✓ Strong password';&#10;        } else if (mediumRegex.test(value)) {&#10;          strength = 'medium';&#10;          isValid = true;&#10;          message = 'Password is moderate';&#10;        } else if (value.length &gt;= 6) {&#10;          strength = 'weak';&#10;          isValid = true;&#10;          message = 'Password is weak';&#10;        } else {&#10;          strength = 'weak';&#10;          message = 'Password is too weak';&#10;        }&#10;        return { isValid, message, strength };&#10;      default:&#10;        return { isValid: false, message: '' };&#10;    }&#10;  };&#10;&#10;  const handleChange = (e) =&gt; {&#10;    const { name, value } = e.target;&#10;    setFormData(prev =&gt; ({ ...prev, [name]: value }));&#10;&#10;    const validation = validateField(name, value);&#10;    setValidations(prev =&gt; ({&#10;      ...prev,&#10;      [name]: validation&#10;    }));&#10;  };&#10;&#10;  const handleSubmit = async (e) =&gt; {&#10;    e.preventDefault();&#10;    setError('');&#10;    &#10;    if (!Object.values(validations).every(v =&gt; v.isValid)) {&#10;      setError('Please fill all fields correctly');&#10;      return;&#10;    }&#10;&#10;    if (formData.password !== formData.confirmPassword) {&#10;      setError('Passwords do not match');&#10;      return;&#10;    }&#10;&#10;    setIsLoading(true);&#10;    try {&#10;      await UserService.register({&#10;        name: formData.fullName,&#10;        email: formData.email,&#10;        password: formData.password,&#10;        phoneNumber: formData.phoneNumber&#10;      });&#10;      navigate('/login', { &#10;        state: { message: 'Registration successful! Please login.' }&#10;      });&#10;    } catch (err) {&#10;      setError(err.message || 'Registration failed. Please try again.');&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;auth-container&quot;&gt;&#10;      &lt;div className=&quot;auth-box&quot;&gt;&#10;        &lt;div className=&quot;auth-header&quot;&gt;&#10;          &lt;h1&gt;Join RideShareX&lt;/h1&gt;&#10;          &lt;p&gt;Create an account to get started&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form className=&quot;auth-form&quot; onSubmit={handleSubmit}&gt;&#10;          {error &amp;&amp; &lt;div className=&quot;error-message&quot;&gt;{error}&lt;/div&gt;}&#10;          &#10;          &lt;div className=&quot;form-group&quot;&gt;&#10;            &lt;label htmlFor=&quot;fullName&quot;&gt;Full Name&lt;/label&gt;&#10;            &lt;span className=&quot;input-icon&quot;&gt;&lt;/span&gt;&#10;            &lt;input&#10;              type=&quot;text&quot;&#10;              id=&quot;fullName&quot;&#10;              name=&quot;fullName&quot;&#10;              value={formData.fullName}&#10;              onChange={handleChange}&#10;              placeholder=&quot;Enter your full name&quot;&#10;              autoComplete=&quot;name&quot;&#10;              required&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;form-group&quot;&gt;&#10;            &lt;label htmlFor=&quot;email&quot;&gt;Email&lt;/label&gt;&#10;            &lt;span className=&quot;input-icon&quot;&gt;✉️&lt;/span&gt;&#10;            &lt;input&#10;              type=&quot;email&quot;&#10;              id=&quot;email&quot;&#10;              name=&quot;email&quot;&#10;              value={formData.email}&#10;              onChange={handleChange}&#10;              placeholder=&quot;Enter your email&quot;&#10;              autoComplete=&quot;email&quot;&#10;              required&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;form-group&quot;&gt;&#10;            &lt;label htmlFor=&quot;phoneNumber&quot;&gt;Phone Number&lt;/label&gt;&#10;            &lt;span className=&quot;input-icon&quot;&gt;&lt;/span&gt;&#10;            &lt;input&#10;              type=&quot;tel&quot;&#10;              id=&quot;phoneNumber&quot;&#10;              name=&quot;phoneNumber&quot;&#10;              value={formData.phoneNumber}&#10;              onChange={handleChange}&#10;              placeholder=&quot;Enter your phone number&quot;&#10;              autoComplete=&quot;tel&quot;&#10;              required&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;form-group&quot;&gt;&#10;            &lt;label htmlFor=&quot;password&quot;&gt;Password&lt;/label&gt;&#10;            &lt;span className=&quot;input-icon&quot;&gt;&lt;/span&gt;&#10;            &lt;input&#10;              type=&quot;password&quot;&#10;              id=&quot;password&quot;&#10;              name=&quot;password&quot;&#10;              value={formData.password}&#10;              onChange={handleChange}&#10;              placeholder=&quot;Create a strong password&quot;&#10;              autoComplete=&quot;new-password&quot;&#10;              required&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;form-group&quot;&gt;&#10;            &lt;label htmlFor=&quot;confirmPassword&quot;&gt;Confirm Password&lt;/label&gt;&#10;            &lt;span className=&quot;input-icon&quot;&gt;&lt;/span&gt;&#10;            &lt;input&#10;              type=&quot;password&quot;&#10;              id=&quot;confirmPassword&quot;&#10;              name=&quot;confirmPassword&quot;&#10;              value={formData.confirmPassword}&#10;              onChange={handleChange}&#10;              placeholder=&quot;Confirm your password&quot;&#10;              autoComplete=&quot;new-password&quot;&#10;              required&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;button &#10;            type=&quot;submit&quot; &#10;            className=&quot;auth-button&quot; &#10;            disabled={isLoading}&#10;          &gt;&#10;            {isLoading ? (&#10;              &lt;&gt;&#10;                Creating Account&#10;                &lt;span className=&quot;spinner&quot;&gt;&lt;/span&gt;&#10;              &lt;/&gt;&#10;            ) : (&#10;              'Create Account'&#10;            )}&#10;          &lt;/button&gt;&#10;&#10;          &lt;div className=&quot;auth-divider&quot;&gt;&#10;            &lt;span&gt;OR&lt;/span&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;social-login&quot;&gt;&#10;            &lt;button type=&quot;button&quot; className=&quot;social-button&quot;&gt;&#10;              &lt;img &#10;                src=&quot;https://www.google.com/favicon.ico&quot; &#10;                alt=&quot;Google&quot;&#10;              /&gt;&#10;              Sign up with Google&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/form&gt;&#10;&#10;        &lt;div className=&quot;auth-footer&quot;&gt;&#10;          Already have an account?&#10;          &lt;Link to=&quot;/login&quot;&gt;Sign in&lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default Signup;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ridesharex-frontend/src/styles/Auth.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ridesharex-frontend/src/styles/Auth.css" />
              <option name="originalContent" value=".auth-container {&#10;  min-height: 100vh;&#10;  background: linear-gradient(135deg, #000000 0%, #1a1a1a 100%);&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  padding: 20px;&#10;  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;&#10;}&#10;&#10;.auth-box {&#10;  background: rgba(255, 255, 255, 0.95);&#10;  border-radius: 16px;&#10;  padding: 40px;&#10;  width: 100%;&#10;  max-width: 480px;&#10;  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);&#10;  backdrop-filter: blur(8px);&#10;  scrollbar-width: thin;&#10;  scrollbar-color: #666 transparent;&#10;}&#10;&#10;.auth-box::-webkit-scrollbar {&#10;  width: 6px;&#10;}&#10;&#10;.auth-box::-webkit-scrollbar-track {&#10;  background: transparent;&#10;}&#10;&#10;.auth-box::-webkit-scrollbar-thumb {&#10;  background-color: #666;&#10;  border-radius: 3px;&#10;}&#10;&#10;.auth-header {&#10;  text-align: center;&#10;  margin-bottom: 35px;&#10;}&#10;&#10;.auth-header h1 {&#10;  font-size: 32px;&#10;  color: #000;&#10;  margin-bottom: 12px;&#10;  font-weight: 600;&#10;}&#10;&#10;.auth-header p {&#10;  color: #666;&#10;  font-size: 16px;&#10;}&#10;&#10;.auth-form {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 24px;&#10;}&#10;&#10;.form-group {&#10;  position: relative;&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 8px;&#10;}&#10;&#10;.form-group label {&#10;  font-size: 14px;&#10;  color: #333;&#10;  font-weight: 500;&#10;  margin-left: 4px;&#10;}&#10;&#10;.form-group input {&#10;  padding: 14px 16px;&#10;  padding-left: 40px; /* Space for icons */&#10;  border: 2px solid #e0e0e0;&#10;  border-radius: 10px;&#10;  font-size: 15px;&#10;  transition: all 0.3s ease;&#10;  background: white;&#10;}&#10;&#10;.form-group .input-icon {&#10;  position: absolute;&#10;  left: 12px;&#10;  top: 38px;&#10;  color: #666;&#10;  font-size: 18px;&#10;}&#10;&#10;.form-group.success input {&#10;  border-color: #4CAF50;&#10;}&#10;&#10;.form-group.error input {&#10;  border-color: #f44336;&#10;}&#10;&#10;.password-strength {&#10;  height: 4px;&#10;  background: #e0e0e0;&#10;  border-radius: 2px;&#10;  margin-top: 8px;&#10;  overflow: hidden;&#10;}&#10;&#10;.password-strength-bar {&#10;  height: 100%;&#10;  width: 0%;&#10;  transition: width 0.3s ease, background-color 0.3s ease;&#10;}&#10;&#10;.password-strength-bar.weak { width: 33%; background-color: #f44336; }&#10;.password-strength-bar.medium { width: 66%; background-color: #ffa726; }&#10;.password-strength-bar.strong { width: 100%; background-color: #4CAF50; }&#10;&#10;.auth-button {&#10;  background-color: #000;&#10;  color: white;&#10;  padding: 16px;&#10;  border: none;&#10;  border-radius: 10px;&#10;  font-size: 16px;&#10;  font-weight: 600;&#10;  cursor: pointer;&#10;  transition: all 0.3s ease;&#10;  margin-top: 10px;&#10;}&#10;&#10;.auth-button:hover {&#10;  background-color: #333;&#10;  transform: translateY(-1px);&#10;  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);&#10;}&#10;&#10;.auth-button:active {&#10;  transform: translateY(0);&#10;}&#10;&#10;.auth-button:disabled {&#10;  background-color: #cccccc;&#10;  cursor: not-allowed;&#10;  transform: none;&#10;  box-shadow: none;&#10;}&#10;&#10;.auth-button .spinner {&#10;  display: inline-block;&#10;  width: 16px;&#10;  height: 16px;&#10;  border: 2px solid rgba(255,255,255,0.3);&#10;  border-radius: 50%;&#10;  border-top-color: #fff;&#10;  animation: spin 1s ease-in-out infinite;&#10;  margin-left: 8px;&#10;}&#10;&#10;@keyframes spin {&#10;  to { transform: rotate(360deg); }&#10;}&#10;&#10;.auth-divider {&#10;  display: flex;&#10;  align-items: center;&#10;  text-align: center;&#10;  margin: 20px 0;&#10;  color: #666;&#10;}&#10;&#10;.auth-divider::before,&#10;.auth-divider::after {&#10;  content: '';&#10;  flex: 1;&#10;  border-bottom: 1px solid #e0e0e0;&#10;}&#10;&#10;.auth-divider span {&#10;  padding: 0 15px;&#10;  font-size: 14px;&#10;  background: white;&#10;}&#10;&#10;.social-login {&#10;  display: flex;&#10;  gap: 12px;&#10;}&#10;&#10;.social-button {&#10;  position: relative;&#10;  flex: 1;&#10;  padding: 12px;&#10;  padding-left: 48px;&#10;  border: 2px solid #e0e0e0;&#10;  border-radius: 10px;&#10;  background: white;&#10;  color: #333;&#10;  font-size: 14px;&#10;  font-weight: 500;&#10;  cursor: pointer;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  gap: 8px;&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.social-button:hover {&#10;  background-color: #f8f8f8;&#10;  border-color: #ccc;&#10;}&#10;&#10;.social-button img {&#10;  position: absolute;&#10;  left: 16px;&#10;  top: 50%;&#10;  transform: translateY(-50%);&#10;  width: 20px;&#10;  height: 20px;&#10;}&#10;&#10;.auth-footer {&#10;  margin-top: 30px;&#10;  text-align: center;&#10;  color: #666;&#10;  font-size: 14px;&#10;}&#10;&#10;.auth-footer a {&#10;  color: #000;&#10;  text-decoration: none;&#10;  font-weight: 500;&#10;  margin-left: 5px;&#10;}&#10;&#10;.auth-footer a:hover {&#10;  text-decoration: underline;&#10;}&#10;&#10;.error-message {&#10;  background-color: #fff2f2;&#10;  border: 1px solid #ffcdd2;&#10;  color: #d32f2f;&#10;  padding: 12px;&#10;  border-radius: 8px;&#10;  font-size: 14px;&#10;  margin-bottom: 20px;&#10;}&#10;&#10;.form-group .validation-message {&#10;  font-size: 12px;&#10;  margin-top: 4px;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 4px;&#10;}&#10;&#10;.form-group .validation-message.success {&#10;  color: #4CAF50;&#10;}&#10;&#10;.form-group .validation-message.error {&#10;  color: #f44336;&#10;}&#10;&#10;/* Responsive Design */&#10;@media (max-width: 480px) {&#10;  .auth-box {&#10;    padding: 30px 20px;&#10;  }&#10;&#10;  .auth-header h1 {&#10;    font-size: 24px;&#10;  }&#10;&#10;  .form-group input {&#10;    padding: 12px 14px;&#10;  }&#10;&#10;  .social-login {&#10;    flex-direction: column;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value=".auth-container {&#10;  min-height: 100vh;&#10;  background: linear-gradient(135deg, #000000 0%, #1a1a1a 100%);&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  padding: 20px;&#10;}&#10;&#10;.auth-box {&#10;  background: rgba(255, 255, 255, 0.95);&#10;  border-radius: 16px;&#10;  padding: 40px;&#10;  width: 100%;&#10;  max-width: 480px;&#10;  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);&#10;  backdrop-filter: blur(8px);&#10;  transition: transform 0.3s ease;&#10;}&#10;&#10;.auth-box:hover {&#10;  transform: translateY(-2px);&#10;}&#10;&#10;.auth-header {&#10;  text-align: center;&#10;  margin-bottom: 35px;&#10;}&#10;&#10;.auth-header h1 {&#10;  font-size: 32px;&#10;  color: #000;&#10;  margin-bottom: 12px;&#10;  font-weight: 600;&#10;}&#10;&#10;.auth-header p {&#10;  color: #666;&#10;  font-size: 16px;&#10;}&#10;&#10;.auth-form {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 24px;&#10;}&#10;&#10;.form-group {&#10;  position: relative;&#10;  margin-bottom: 20px;&#10;}&#10;&#10;.form-group label {&#10;  font-size: 14px;&#10;  color: #333;&#10;  font-weight: 500;&#10;  margin-left: 4px;&#10;}&#10;&#10;.form-group input {&#10;  width: 100%;&#10;  padding: 12px 40px;&#10;  border: 2px solid #e0e0e0;&#10;  border-radius: 8px;&#10;  font-size: 16px;&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.form-group input:focus {&#10;  border-color: #000;&#10;  box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.1);&#10;  outline: none;&#10;}&#10;&#10;.form-group .input-icon {&#10;  position: absolute;&#10;  left: 12px;&#10;  top: 50%;&#10;  transform: translateY(-50%);&#10;  font-size: 18px;&#10;  color: #666;&#10;  pointer-events: none;&#10;}&#10;&#10;.validation-message {&#10;  font-size: 12px;&#10;  margin-top: 4px;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 4px;&#10;}&#10;&#10;.validation-message.success {&#10;  color: #4CAF50;&#10;}&#10;&#10;.validation-message.error {&#10;  color: #f44336;&#10;}&#10;&#10;.password-strength {&#10;  height: 4px;&#10;  background: #e0e0e0;&#10;  border-radius: 2px;&#10;  margin-top: 8px;&#10;  overflow: hidden;&#10;}&#10;&#10;.password-strength-bar {&#10;  height: 100%;&#10;  width: 0%;&#10;  transition: width 0.3s ease, background-color 0.3s ease;&#10;}&#10;&#10;.password-strength-bar.weak { width: 33%; background-color: #f44336; }&#10;.password-strength-bar.medium { width: 66%; background-color: #ffa726; }&#10;.password-strength-bar.strong { width: 100%; background-color: #4CAF50; }&#10;&#10;.auth-button {&#10;  width: 100%;&#10;  padding: 14px;&#10;  border: none;&#10;  border-radius: 8px;&#10;  background: #000;&#10;  color: white;&#10;  font-size: 16px;&#10;  font-weight: 600;&#10;  cursor: pointer;&#10;  transition: all 0.3s ease;&#10;  position: relative;&#10;  overflow: hidden;&#10;}&#10;&#10;.auth-button:disabled {&#10;  background: #ccc;&#10;  cursor: not-allowed;&#10;}&#10;&#10;.auth-button:not(:disabled):hover {&#10;  background: #333;&#10;  transform: translateY(-1px);&#10;}&#10;&#10;.spinner {&#10;  display: inline-block;&#10;  width: 16px;&#10;  height: 16px;&#10;  border: 2px solid rgba(255,255,255,0.3);&#10;  border-radius: 50%;&#10;  border-top-color: #fff;&#10;  animation: spin 1s linear infinite;&#10;  margin-left: 8px;&#10;  vertical-align: middle;&#10;}&#10;&#10;@keyframes spin {&#10;  to { transform: rotate(360deg); }&#10;}&#10;&#10;.auth-divider {&#10;  display: flex;&#10;  align-items: center;&#10;  text-align: center;&#10;  margin: 20px 0;&#10;  color: #666;&#10;}&#10;&#10;.auth-divider::before,&#10;.auth-divider::after {&#10;  content: '';&#10;  flex: 1;&#10;  border-bottom: 1px solid #e0e0e0;&#10;}&#10;&#10;.auth-divider span {&#10;  padding: 0 15px;&#10;  font-size: 14px;&#10;  background: white;&#10;}&#10;&#10;.social-login {&#10;  display: flex;&#10;  gap: 12px;&#10;}&#10;&#10;.social-button {&#10;  position: relative;&#10;  flex: 1;&#10;  padding: 12px;&#10;  padding-left: 48px;&#10;  border: 2px solid #e0e0e0;&#10;  border-radius: 10px;&#10;  background: white;&#10;  color: #333;&#10;  font-size: 14px;&#10;  font-weight: 500;&#10;  cursor: pointer;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  gap: 8px;&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.social-button:hover {&#10;  background-color: #f8f8f8;&#10;  border-color: #ccc;&#10;}&#10;&#10;.social-button img {&#10;  position: absolute;&#10;  left: 16px;&#10;  top: 50%;&#10;  transform: translateY(-50%);&#10;  width: 20px;&#10;  height: 20px;&#10;}&#10;&#10;.auth-footer {&#10;  margin-top: 30px;&#10;  text-align: center;&#10;  color: #666;&#10;  font-size: 14px;&#10;}&#10;&#10;.auth-footer a {&#10;  color: #000;&#10;  text-decoration: none;&#10;  font-weight: 500;&#10;  margin-left: 5px;&#10;}&#10;&#10;.auth-footer a:hover {&#10;  text-decoration: underline;&#10;}&#10;&#10;.error-message {&#10;  background-color: #fff2f2;&#10;  border: 1px solid #ffcdd2;&#10;  color: #d32f2f;&#10;  padding: 12px;&#10;  border-radius: 8px;&#10;  font-size: 14px;&#10;  margin-bottom: 20px;&#10;}&#10;&#10;/* Responsive Design */&#10;@media (max-width: 480px) {&#10;  .auth-box {&#10;    padding: 30px 20px;&#10;  }&#10;&#10;  .auth-header h1 {&#10;    font-size: 24px;&#10;  }&#10;&#10;  .form-group input {&#10;    padding: 12px 14px;&#10;  }&#10;&#10;  .social-login {&#10;    flex-direction: column;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ridesharex-frontend/src/styles/Home.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ridesharex-frontend/src/styles/Home.css" />
              <option name="originalContent" value="/* Home.css - Styling for the RideShareX homepage */&#10;&#10;/* General styling */&#10;* {&#10;  box-sizing: border-box;&#10;  margin: 0;&#10;  padding: 0;&#10;  font-family: Arial, Helvetica, sans-serif;&#10;}&#10;&#10;.home-container {&#10;  width: 100%;&#10;}&#10;&#10;/* Top Navigation Bar */&#10;.top-nav {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  padding: 15px 40px;&#10;  background-color: #000;&#10;  color: white;&#10;}&#10;&#10;.logo {&#10;  font-size: 24px;&#10;  font-weight: bold;&#10;}&#10;&#10;.nav-links {&#10;  display: flex;&#10;  gap: 20px;&#10;}&#10;&#10;.nav-links a {&#10;  color: white;&#10;  text-decoration: none;&#10;  padding: 5px 0;&#10;}&#10;&#10;.nav-links a.active {&#10;  font-weight: bold;&#10;}&#10;&#10;.auth-links {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 20px;&#10;}&#10;&#10;.auth-links a {&#10;  color: white;&#10;  text-decoration: none;&#10;}&#10;&#10;.signup-btn {&#10;  background-color: white;&#10;  color: black !important;&#10;  padding: 10px 20px;&#10;  border-radius: 30px;&#10;  font-weight: bold;&#10;}&#10;&#10;/* Secondary Navigation */&#10;.secondary-nav {&#10;  padding: 15px 40px;&#10;  border-bottom: 1px solid #e5e5e5;&#10;  display: flex;&#10;  align-items: center;&#10;}&#10;&#10;.secondary-nav h2 {&#10;  margin-right: 40px;&#10;}&#10;&#10;.secondary-links {&#10;  display: flex;&#10;  gap: 30px;&#10;}&#10;&#10;.secondary-links a {&#10;  color: #333;&#10;  text-decoration: none;&#10;  padding: 10px 0;&#10;  font-size: 14px;&#10;}&#10;&#10;.secondary-links a.active {&#10;  color: #000;&#10;  font-weight: bold;&#10;}&#10;&#10;/* Main Content */&#10;.main-content {&#10;  padding: 20px 40px;&#10;}&#10;&#10;.ride-request-container {&#10;  display: flex;&#10;  margin-bottom: 40px;&#10;}&#10;&#10;.ride-form {&#10;  flex: 1;&#10;  padding-right: 40px;&#10;}&#10;&#10;.ride-form h1 {&#10;  font-size: 36px;&#10;  margin-bottom: 30px;&#10;}&#10;&#10;/* Location Inputs */&#10;.location-inputs {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 10px;&#10;  margin-bottom: 30px;&#10;}&#10;&#10;.input-group {&#10;  position: relative;&#10;  display: flex;&#10;  align-items: center;&#10;}&#10;&#10;.input-icon {&#10;  position: absolute;&#10;  left: 15px;&#10;  font-size: 18px;&#10;}&#10;&#10;.pickup-icon {&#10;  color: black;&#10;}&#10;&#10;.dropoff-icon {&#10;  color: black;&#10;}&#10;&#10;.pickup-icon-small {&#10;  color: black;&#10;  font-size: 14px;&#10;  margin-right: 10px;&#10;}&#10;&#10;.dropoff-icon-small {&#10;  color: #333;&#10;  font-size: 14px;&#10;  margin-right: 10px;&#10;}&#10;&#10;.input-group input {&#10;  width: 100%;&#10;  padding: 15px 15px 15px 40px;&#10;  border: 1px solid #e5e5e5;&#10;  border-radius: 8px;&#10;  font-size: 16px;&#10;}&#10;&#10;/* Location Suggestion Dropdowns */&#10;.location-suggestions {&#10;  position: absolute;&#10;  top: 100%;&#10;  left: 0;&#10;  right: 0;&#10;  background-color: white;&#10;  border: 1px solid #e5e5e5;&#10;  border-radius: 8px;&#10;  margin-top: 5px;&#10;  max-height: 250px;&#10;  overflow-y: auto;&#10;  z-index: 100;&#10;  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.suggestion-item-dropdown {&#10;  display: flex;&#10;  align-items: center;&#10;  padding: 12px 15px;&#10;  cursor: pointer;&#10;  border-bottom: 1px solid #f0f0f0;&#10;}&#10;&#10;.suggestion-item-dropdown:hover {&#10;  background-color: #f9f9f9;&#10;}&#10;&#10;.suggestion-item-dropdown:last-child {&#10;  border-bottom: none;&#10;}&#10;&#10;.suggestion-item-dropdown .suggestion-text {&#10;  flex: 1;&#10;}&#10;&#10;.suggestion-item-dropdown .suggestion-text strong {&#10;  display: block;&#10;  font-size: 14px;&#10;  margin-bottom: 2px;&#10;}&#10;&#10;/* Date and Time Selectors */&#10;.datetime-selector {&#10;  display: flex;&#10;  gap: 20px;&#10;  margin-bottom: 30px;&#10;}&#10;&#10;.date-selector, .time-selector {&#10;  flex: 1;&#10;}&#10;&#10;.datetime-selector label {&#10;  display: block;&#10;  margin-bottom: 10px;&#10;  font-weight: bold;&#10;}&#10;&#10;.selector-input {&#10;  position: relative;&#10;  display: flex;&#10;  align-items: center;&#10;}&#10;&#10;.selector-input select {&#10;  width: 100%;&#10;  padding: 15px 15px 15px 40px;&#10;  border: 1px solid #e5e5e5;&#10;  border-radius: 8px;&#10;  font-size: 16px;&#10;  appearance: none;&#10;  background-color: white;&#10;}&#10;&#10;.calendar-icon, .time-icon {&#10;  position: absolute;&#10;  left: 15px;&#10;}&#10;&#10;/* Destination Suggestions */&#10;.destination-suggestions {&#10;  margin-bottom: 30px;&#10;}&#10;&#10;.destination-suggestions h3 {&#10;  margin-bottom: 20px;&#10;}&#10;&#10;.suggestion-item {&#10;  display: flex;&#10;  align-items: center;&#10;  padding: 15px;&#10;  border: 1px solid #e5e5e5;&#10;  border-radius: 8px;&#10;  margin-bottom: 10px;&#10;}&#10;&#10;.suggestion-icon {&#10;  margin-right: 15px;&#10;  font-size: 24px;&#10;}&#10;&#10;.suggestion-text h4 {&#10;  margin-bottom: 5px;&#10;}&#10;&#10;.suggestion-text p {&#10;  color: #777;&#10;  font-size: 14px;&#10;}&#10;&#10;/* See Prices Button */&#10;.see-prices-btn {&#10;  background-color: black;&#10;  color: white;&#10;  padding: 15px 25px;&#10;  border: none;&#10;  border-radius: 8px;&#10;  font-size: 16px;&#10;  font-weight: bold;&#10;  cursor: pointer;&#10;}&#10;&#10;/* Map Placeholder */&#10;.map-placeholder {&#10;  flex: 1;&#10;  border-radius: 8px;&#10;  min-height: 500px;&#10;  overflow: hidden;&#10;  position: relative;&#10;}&#10;&#10;.map-container {&#10;  width: 100%;&#10;  height: 100%;&#10;  position: relative;&#10;  min-height: 500px;&#10;}&#10;&#10;/* Custom map markers for Leaflet */&#10;.custom-map-marker {&#10;  border-radius: 50%;&#10;}&#10;&#10;.pickup-marker {&#10;  background-color: black;&#10;  border: 2px solid white;&#10;  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);&#10;}&#10;&#10;.dropoff-marker {&#10;  background-color: #333;&#10;  border: 2px solid white;&#10;  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);&#10;}&#10;&#10;.location-marker {&#10;  background-color: #0D8BF0;&#10;  border: 2px solid white;&#10;  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);&#10;}&#10;&#10;/* Leaflet specific styles */&#10;.leaflet-container {&#10;  height: 500px;&#10;  width: 100%;&#10;  border-radius: 8px;&#10;}&#10;&#10;.leaflet-control-zoom {&#10;  border: none !important;&#10;  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2) !important;&#10;}&#10;&#10;.leaflet-control-zoom a {&#10;  color: #333 !important;&#10;}&#10;&#10;.leaflet-control-attribution {&#10;  font-size: 10px !important;&#10;}&#10;&#10;/* Suggestions Section */&#10;.suggestions-section {&#10;  margin-top: 60px;&#10;}&#10;&#10;.suggestions-section h2 {&#10;  margin-bottom: 30px;&#10;}&#10;&#10;.suggestion-cards {&#10;  display: flex;&#10;  gap: 20px;&#10;}&#10;&#10;.suggestion-card {&#10;  flex: 1;&#10;  border: 1px solid #e5e5e5;&#10;  border-radius: 8px;&#10;  padding: 20px;&#10;  display: flex;&#10;  justify-content: space-between;&#10;}&#10;&#10;.card-content h3 {&#10;  margin-bottom: 10px;&#10;}&#10;&#10;.card-icon {&#10;  font-size: 30px;&#10;}&#10;&#10;/* Media Queries for Responsiveness */&#10;@media (max-width: 1024px) {&#10;  .ride-request-container {&#10;    flex-direction: column;&#10;  }&#10;&#10;  .ride-form {&#10;    padding-right: 0;&#10;    margin-bottom: 30px;&#10;  }&#10;}&#10;&#10;@media (max-width: 768px) {&#10;  .top-nav, .secondary-nav {&#10;    padding: 15px 20px;&#10;  }&#10;&#10;  .main-content {&#10;    padding: 20px;&#10;  }&#10;&#10;  .suggestion-cards {&#10;    flex-direction: column;&#10;  }&#10;&#10;  .suggestion-card {&#10;    margin-bottom: 15px;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="/* Home.css - Styling for the RideShareX homepage */&#10;&#10;/* General styling */&#10;* {&#10;  box-sizing: border-box;&#10;  margin: 0;&#10;  padding: 0;&#10;  font-family: Arial, Helvetica, sans-serif;&#10;}&#10;&#10;.home-container {&#10;  width: 100%;&#10;}&#10;&#10;/* Top Navigation Bar */&#10;.top-nav {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  padding: 15px 40px;&#10;  background-color: #000;&#10;  color: white;&#10;}&#10;&#10;.logo {&#10;  font-size: 24px;&#10;  font-weight: bold;&#10;}&#10;&#10;.nav-links {&#10;  display: flex;&#10;  gap: 20px;&#10;}&#10;&#10;.nav-links a {&#10;  color: white;&#10;  text-decoration: none;&#10;  padding: 5px 0;&#10;}&#10;&#10;.nav-links a.active {&#10;  font-weight: bold;&#10;}&#10;&#10;.auth-links {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 20px;&#10;}&#10;&#10;.auth-links a {&#10;  color: white;&#10;  text-decoration: none;&#10;}&#10;&#10;.signup-btn {&#10;  background-color: white;&#10;  color: black !important;&#10;  padding: 10px 20px;&#10;  border-radius: 30px;&#10;  font-weight: bold;&#10;}&#10;&#10;/* Secondary Navigation */&#10;.secondary-nav {&#10;  padding: 15px 40px;&#10;  border-bottom: 1px solid #e5e5e5;&#10;  display: flex;&#10;  align-items: center;&#10;}&#10;&#10;.secondary-nav h2 {&#10;  margin-right: 40px;&#10;}&#10;&#10;.secondary-links {&#10;  display: flex;&#10;  gap: 30px;&#10;}&#10;&#10;.secondary-links a {&#10;  color: #333;&#10;  text-decoration: none;&#10;  padding: 10px 0;&#10;  font-size: 14px;&#10;}&#10;&#10;.secondary-links a.active {&#10;  color: #000;&#10;  font-weight: bold;&#10;}&#10;&#10;/* Main Content */&#10;.main-content {&#10;  padding: 20px 40px;&#10;}&#10;&#10;.ride-request-container {&#10;  display: flex;&#10;  margin-bottom: 40px;&#10;}&#10;&#10;.ride-form {&#10;  flex: 1;&#10;  padding-right: 40px;&#10;}&#10;&#10;.ride-form h1 {&#10;  font-size: 36px;&#10;  margin-bottom: 30px;&#10;}&#10;&#10;/* Location Inputs */&#10;.location-inputs {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 10px;&#10;  margin-bottom: 30px;&#10;}&#10;&#10;.input-group {&#10;  position: relative;&#10;  display: flex;&#10;  align-items: center;&#10;}&#10;&#10;.input-icon {&#10;  position: absolute;&#10;  left: 15px;&#10;  font-size: 18px;&#10;}&#10;&#10;.pickup-icon {&#10;  color: black;&#10;}&#10;&#10;.dropoff-icon {&#10;  color: black;&#10;}&#10;&#10;.pickup-icon-small {&#10;  color: black;&#10;  font-size: 14px;&#10;  margin-right: 10px;&#10;}&#10;&#10;.dropoff-icon-small {&#10;  color: #333;&#10;  font-size: 14px;&#10;  margin-right: 10px;&#10;}&#10;&#10;.input-group input {&#10;  width: 100%;&#10;  padding: 15px 15px 15px 40px;&#10;  border: 1px solid #e5e5e5;&#10;  border-radius: 8px;&#10;  font-size: 16px;&#10;}&#10;&#10;/* Location Suggestion Dropdowns */&#10;.location-suggestions {&#10;  position: absolute;&#10;  top: 100%;&#10;  left: 0;&#10;  right: 0;&#10;  background-color: white;&#10;  border: 1px solid #e5e5e5;&#10;  border-radius: 8px;&#10;  margin-top: 5px;&#10;  max-height: 250px;&#10;  overflow-y: auto;&#10;  z-index: 100;&#10;  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.suggestion-item-dropdown {&#10;  display: flex;&#10;  align-items: center;&#10;  padding: 12px 15px;&#10;  cursor: pointer;&#10;  border-bottom: 1px solid #f0f0f0;&#10;}&#10;&#10;.suggestion-item-dropdown:hover {&#10;  background-color: #f9f9f9;&#10;}&#10;&#10;.suggestion-item-dropdown:last-child {&#10;  border-bottom: none;&#10;}&#10;&#10;.suggestion-item-dropdown .suggestion-text {&#10;  flex: 1;&#10;}&#10;&#10;.suggestion-item-dropdown .suggestion-text strong {&#10;  display: block;&#10;  font-size: 14px;&#10;  margin-bottom: 2px;&#10;}&#10;&#10;/* Date and Time Selectors */&#10;.datetime-selector {&#10;  display: flex;&#10;  gap: 20px;&#10;  margin-bottom: 30px;&#10;}&#10;&#10;.date-selector, .time-selector {&#10;  flex: 1;&#10;}&#10;&#10;.datetime-selector label {&#10;  display: block;&#10;  margin-bottom: 10px;&#10;  font-weight: bold;&#10;}&#10;&#10;.selector-input {&#10;  position: relative;&#10;  display: flex;&#10;  align-items: center;&#10;}&#10;&#10;.selector-input select {&#10;  width: 100%;&#10;  padding: 15px 15px 15px 40px;&#10;  border: 1px solid #e5e5e5;&#10;  border-radius: 8px;&#10;  font-size: 16px;&#10;  appearance: none;&#10;  background-color: white;&#10;}&#10;&#10;.calendar-icon, .time-icon {&#10;  position: absolute;&#10;  left: 15px;&#10;}&#10;&#10;/* Destination Suggestions */&#10;.destination-suggestions {&#10;  margin-bottom: 30px;&#10;}&#10;&#10;.destination-suggestions h3 {&#10;  margin-bottom: 20px;&#10;}&#10;&#10;.suggestion-item {&#10;  display: flex;&#10;  align-items: center;&#10;  padding: 15px;&#10;  border: 1px solid #e5e5e5;&#10;  border-radius: 8px;&#10;  margin-bottom: 10px;&#10;}&#10;&#10;.suggestion-icon {&#10;  margin-right: 15px;&#10;  font-size: 24px;&#10;}&#10;&#10;.suggestion-text h4 {&#10;  margin-bottom: 5px;&#10;}&#10;&#10;.suggestion-text p {&#10;  color: #777;&#10;  font-size: 14px;&#10;}&#10;&#10;/* See Prices Button */&#10;.see-prices-btn {&#10;  background-color: black;&#10;  color: white;&#10;  padding: 15px 25px;&#10;  border: none;&#10;  border-radius: 8px;&#10;  font-size: 16px;&#10;  font-weight: bold;&#10;  cursor: pointer;&#10;}&#10;&#10;/* Map Placeholder */&#10;.map-placeholder {&#10;  flex: 1;&#10;  border-radius: 8px;&#10;  min-height: 500px;&#10;  overflow: hidden;&#10;  position: relative;&#10;}&#10;&#10;.map-container {&#10;  height: 500px;&#10;  width: 100%;&#10;  border-radius: 12px;&#10;  overflow: hidden;&#10;  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;/* Custom map markers for Leaflet */&#10;.custom-map-marker {&#10;  border-radius: 50%;&#10;}&#10;&#10;.pickup-marker {&#10;  background-color: black;&#10;  border: 2px solid white;&#10;  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);&#10;}&#10;&#10;.dropoff-marker {&#10;  background-color: #333;&#10;  border: 2px solid white;&#10;  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);&#10;}&#10;&#10;.location-marker {&#10;  background-color: #0D8BF0;&#10;  border: 2px solid white;&#10;  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);&#10;}&#10;&#10;/* Custom marker styles */&#10;.custom-div-icon {&#10;  background: transparent;&#10;  border: none;&#10;}&#10;&#10;/* Routing machine styles */&#10;.leaflet-routing-container {&#10;  background: white;&#10;  padding: 10px;&#10;  border-radius: 8px;&#10;  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);&#10;  max-width: 320px;&#10;  margin: 10px;&#10;}&#10;&#10;.leaflet-routing-alt {&#10;  max-height: 200px;&#10;  overflow-y: auto;&#10;}&#10;&#10;/* Style the route line */&#10;.leaflet-routing-line {&#10;  stroke: black !important;&#10;  stroke-width: 4 !important;&#10;  stroke-opacity: 0.8 !important;&#10;}&#10;&#10;/* Leaflet specific styles */&#10;.leaflet-container {&#10;  height: 500px;&#10;  width: 100%;&#10;  border-radius: 8px;&#10;}&#10;&#10;.leaflet-control-zoom {&#10;  border: none !important;&#10;  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2) !important;&#10;}&#10;&#10;.leaflet-control-zoom a {&#10;  color: #333 !important;&#10;}&#10;&#10;.leaflet-control-attribution {&#10;  font-size: 10px !important;&#10;}&#10;&#10;/* Suggestions Section */&#10;.suggestions-section {&#10;  margin-top: 60px;&#10;}&#10;&#10;.suggestions-section h2 {&#10;  margin-bottom: 30px;&#10;}&#10;&#10;.suggestion-cards {&#10;  display: flex;&#10;  gap: 20px;&#10;}&#10;&#10;.suggestion-card {&#10;  flex: 1;&#10;  border: 1px solid #e5e5e5;&#10;  border-radius: 8px;&#10;  padding: 20px;&#10;  display: flex;&#10;  justify-content: space-between;&#10;}&#10;&#10;.card-content h3 {&#10;  margin-bottom: 10px;&#10;}&#10;&#10;.card-icon {&#10;  font-size: 30px;&#10;}&#10;&#10;/* Media Queries for Responsiveness */&#10;@media (max-width: 1024px) {&#10;  .ride-request-container {&#10;    flex-direction: column;&#10;  }&#10;&#10;  .ride-form {&#10;    padding-right: 0;&#10;    margin-bottom: 30px;&#10;  }&#10;}&#10;&#10;@media (max-width: 768px) {&#10;  .top-nav, .secondary-nav {&#10;    padding: 15px 20px;&#10;  }&#10;&#10;  .main-content {&#10;    padding: 20px;&#10;  }&#10;&#10;  .suggestion-cards {&#10;    flex-direction: column;&#10;  }&#10;&#10;  .suggestion-card {&#10;    margin-bottom: 15px;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ridesharex-frontend/src/utils/iconUtils.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ridesharex-frontend/src/utils/iconUtils.js" />
              <option name="updatedContent" value="import L from 'leaflet';&#10;&#10;export const blueIcon = new L.Icon({&#10;  iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png',&#10;  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',&#10;  iconSize: [25, 41],&#10;  iconAnchor: [12, 41],&#10;  popupAnchor: [1, -34],&#10;  shadowSize: [41, 41]&#10;});&#10;&#10;export const brownIcon = new L.Icon({&#10;  iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-brown.png',&#10;  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',&#10;  iconSize: [25, 41],&#10;  iconAnchor: [12, 41],&#10;  popupAnchor: [1, -34],&#10;  shadowSize: [41, 41]&#10;});&#10;&#10;export function createVehicleIcon(color) {&#10;  return new L.Icon({&#10;    iconUrl: `https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-${color}.png`,&#10;    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',&#10;    iconSize: [25, 41],&#10;    iconAnchor: [12, 41],&#10;    popupAnchor: [1, -34],&#10;    shadowSize: [41, 41]&#10;  });&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ridesharex-frontend/src/utils/locationUtils.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ridesharex-frontend/src/utils/locationUtils.js" />
              <option name="updatedContent" value="export function getLatLng(location) {&#10;  if (!location) return null;&#10;  if (location.latlng) return [location.latlng.lat, location.latlng.lng];&#10;  if (location.latitude &amp;&amp; location.longitude) return [location.latitude, location.longitude];&#10;  if (Array.isArray(location) &amp;&amp; location.length === 2) return location;&#10;  return null;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>